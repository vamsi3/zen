"use strict";(self.webpackChunkzen=self.webpackChunkzen||[]).push([[8052],{7942:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>g});var r=t(959);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=r.createContext({}),c=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=c(e.components);return r.createElement(d.Provider,{value:n},e.children)},l="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,d=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),l=c(t),u=a,g=l["".concat(d,".").concat(u)]||l[u]||m[u]||i;return t?r.createElement(g,o(o({ref:n},s),{},{components:t})):r.createElement(g,o({ref:n},s))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=u;var p={};for(var d in n)hasOwnProperty.call(n,d)&&(p[d]=n[d]);p.originalType=e,p[l]="string"==typeof e?e:a,o[1]=p;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7358:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>p,toc:()=>c});var r=t(1163),a=(t(959),t(7942));const i={title:"Minimum Spanning Tree (MST)",sidebar_label:"Minimum Spanning Tree"},o=void 0,p={unversionedId:"cp/graph/minimum-spanning-tree",id:"cp/graph/minimum-spanning-tree",title:"Minimum Spanning Tree (MST)",description:"- Graph::WeightedEdge \u279d /cp/graph/graph-class",source:"@site/docs/cp/graph/minimum-spanning-tree.mdx",sourceDirName:"cp/graph",slug:"/cp/graph/minimum-spanning-tree",permalink:"/zen/cp/graph/minimum-spanning-tree",draft:!1,editUrl:"https://github.com/vamsi3/zen/edit/master/docs/cp/graph/minimum-spanning-tree.mdx",tags:[],version:"current",lastUpdatedAt:1677637965,formattedLastUpdatedAt:"Mar 1, 2023",frontMatter:{title:"Minimum Spanning Tree (MST)",sidebar_label:"Minimum Spanning Tree"},sidebar:"cp",previous:{title:"Lowest Common Ancestor",permalink:"/zen/cp/graph/lca"},next:{title:"Strongly Connected Components",permalink:"/zen/cp/graph/scc"}},d={},c=[{value:"Kruskal&#39;s Algorithm",id:"kruskals-algorithm",level:2},{value:"Prim&#39;s Algorithm",id:"prims-algorithm",level:2}],s={toc:c},l="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(l,(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{title:"INCLUDE",type:"note"},(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Graph::Graph"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"Graph::WeightedEdge")," \u279d ",(0,a.kt)("a",{parentName:"li",href:"/cp/graph/graph-class"},"/cp/graph/graph-class")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"DSU::DSU")," \u279d ",(0,a.kt)("a",{parentName:"li",href:"/cp/data-structures/dsu"},"/cp/data-structures/dsu")))),(0,a.kt)("h2",{id:"kruskals-algorithm"},"Kruskal's Algorithm"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"namespace Graph {\n    Graph<WeightedEdge> kruskal(Graph<WeightedEdge>& g) {\n        int32_t n = static_cast<int32_t>(g.adj.size());\n        int32_t m = static_cast<int32_t>(g.ed.size());\n        Graph<WeightedEdge> t(n);\n\n        DSU::DSU dsu(n);\n        vector<int32_t> ed_idx_w_order(m);\n        std::iota(ed_idx_w_order.begin(), ed_idx_w_order.end(), 0);\n        std::sort(ed_idx_w_order.begin(), ed_idx_w_order.end(),\n            [&](const int32_t& x, const int32_t& y) { return g.ed[x].w < g.ed[y].w; });\n\n        for (auto& ed_idx : ed_idx_w_order) {\n            auto& ed = g.ed[ed_idx];\n            if (dsu.join(ed.u, ed.v)) t.addEdge(ed);\n        }\n\n        return t;\n    }\n}\n\nint main() {\n    int n, m; cin >> n >> m;\n\n    Graph::Graph<Graph::WeightedEdge> g(n + 1);\n    for (auto _ [[maybe_unused]] : std::views::iota(0, m)) {\n        int u, v, w; cin >> u >> v >> w;\n        g.addEdge({u, v, w});\n    }\n    \n    Graph::Graph<Graph::WeightedEdge> t = Graph::kruskal(g);\n\n    for (auto edges : t.adj) {\n        for (int edge_idx : edges) {\n            auto ed = t.ed[edge_idx];\n            cout << ed.u << ' ' << ed.v << ' ' << ed.w << endl;\n        }\n    }\n}\n")),(0,a.kt)("h2",{id:"prims-algorithm"},"Prim's Algorithm"))}m.isMDXComponent=!0}}]);