"use strict";(self.webpackChunkzen=self.webpackChunkzen||[]).push([[167],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return f}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=l(r),f=o,d=m["".concat(c,".").concat(f)]||m[f]||p[f]||i;return r?n.createElement(d,a(a({ref:t},u),{},{components:r})):n.createElement(d,a({ref:t},u))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4339:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return u},default:function(){return m}});var n=r(7462),o=r(3366),i=(r(7294),r(3905)),a=["components"],s={title:"Sorting",sidebar_label:"Sorting"},c=void 0,l={unversionedId:"cp/algorithms/sort",id:"cp/algorithms/sort",isDocsHomePage:!1,title:"Sorting",description:"- Stable sort means that elements with equal value are not disturbed of their relative positions after sorting.",source:"@site/docs/cp/algorithms/sort.mdx",sourceDirName:"cp/algorithms",slug:"/cp/algorithms/sort",permalink:"/zen/cp/algorithms/sort",editUrl:"https://github.com/vamsi3/zen/edit/master/docs/cp/algorithms/sort.mdx",tags:[],version:"current",lastUpdatedAt:1634748217,formattedLastUpdatedAt:"10/20/2021",frontMatter:{title:"Sorting",sidebar_label:"Sorting"},sidebar:"cp",previous:{title:"std::merge",permalink:"/zen/cp/algorithms/merge"},next:{title:"Subset Transforms (DP)",permalink:"/zen/cp/algorithms/subset-transforms"}},u=[{value:"Insertion Sort",id:"insertion-sort",children:[],level:2}],p={toc:u};function m(e){var t=e.components,r=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("u",null,"Stable sort")," means that elements with equal value are not disturbed of their relative positions after sorting.")),(0,i.kt)("h2",{id:"insertion-sort"},"Insertion Sort"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'namespace Algorithm {\n    void insertion_sort(std::vector<int>& a) {\n        int n = a.size();\n        for (int i = 1; i < n; ++i) {\n            int x = std::move(a[i]);\n            int j = i - 1;\n            while (j >= 0 && a[j] > x) {\n                a[j + 1] = std::move(a[j]);\n                --j;\n            }\n            a[j + 1] = std::move(x);\n        }\n    }\n}\n\nint main() {\n    vector<int> v = {5, 2, 6, 1, 3, 1, 3, 2, 3, 4};\n    Algorithm::insertion_sort(v);\n    std::ranges::copy(v, std::ostream_iterator<int>(std::cout, " "));\n}\n')))}m.isMDXComponent=!0}}]);