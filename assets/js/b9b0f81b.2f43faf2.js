"use strict";(self.webpackChunkzen=self.webpackChunkzen||[]).push([[7559],{7942:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(959);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=s(n),m=a,f=c["".concat(u,".").concat(m)]||c[m]||p[m]||i;return n?r.createElement(f,l(l({ref:t},d),{},{components:n})):r.createElement(f,l({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o[c]="string"==typeof e?e:a,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},714:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(959),a=n(5924);const i={tabItem:"tabItem_WUOw"};function l(e){let{children:t,hidden:n,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(i.tabItem,l),hidden:n},t)}},5897:(e,t,n)=>{n.d(t,{Z:()=>k});var r=n(8957),a=n(959),i=n(5924),l=n(5186),o=n(8903),u=n(3078),s=n(2748),d=n(1518);function c(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function p(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??c(n);return function(e){const t=(0,s.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const r=(0,o.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,u._X)(i),(0,a.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(r.location.search);t.set(i,e),r.replace({...r.location,search:t.toString()})}),[i,r])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,i=p(e),[l,o]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:i}))),[u,s]=f({queryString:n,groupId:r}),[c,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,i]=(0,d.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:r}),v=(()=>{const e=u??c;return m({value:e,tabValues:i})?e:null})();(0,a.useLayoutEffect)((()=>{v&&o(v)}),[v]);return{selectedValue:l,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),s(e),g(e)}),[s,g,i]),tabValues:i}}var v=n(7525);const y={tabList:"tabList_oWTd",tabItem:"tabItem_MXaH"};function b(e){let{className:t,block:n,selectedValue:o,selectValue:u,tabValues:s}=e;const d=[],{blockElementScrollPositionUntilNextRender:c}=(0,l.o5)(),p=e=>{const t=e.currentTarget,n=d.indexOf(t),r=s[n].value;r!==o&&(c(t),u(r))},m=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=d.indexOf(e.currentTarget)+1;t=d[n]??d[0];break}case"ArrowLeft":{const n=d.indexOf(e.currentTarget)-1;t=d[n]??d[d.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},s.map((e=>{let{value:t,label:n,attributes:l}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>d.push(e),onKeyDown:m,onClick:p},l,{className:(0,i.Z)("tabs__item",y.tabItem,l?.className,{"tabs__item--active":o===t})}),n??t)})))}function h(e){let{lazy:t,children:n,selectedValue:r}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function N(e){const t=g(e);return a.createElement("div",{className:(0,i.Z)("tabs-container",y.tabList)},a.createElement(b,(0,r.Z)({},e,t)),a.createElement(h,(0,r.Z)({},e,t)))}function k(e){const t=(0,v.Z)();return a.createElement(N,(0,r.Z)({key:String(t)},e))}},3796:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>u,default:()=>f,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(8957),a=(n(959),n(7942)),i=n(5897),l=n(714);const o={title:"Treap",sidebar_label:"Treap"},u=void 0,s={unversionedId:"cp/data-structures/treap",id:"cp/data-structures/treap",title:"Treap",description:"Treap with Implicit Key",source:"@site/docs/cp/data-structures/treap.mdx",sourceDirName:"cp/data-structures",slug:"/cp/data-structures/treap",permalink:"/zen/cp/data-structures/treap",draft:!1,editUrl:"https://github.com/vamsi3/zen/edit/master/docs/cp/data-structures/treap.mdx",tags:[],version:"current",lastUpdatedAt:1694358037,formattedLastUpdatedAt:"Sep 10, 2023",frontMatter:{title:"Treap",sidebar_label:"Treap"},sidebar:"cp",previous:{title:"Tournament Tree",permalink:"/zen/cp/data-structures/tournament-tree"},next:{title:"Tree",permalink:"/zen/cp/data-structures/tree"}},d={},c=[{value:"Treap with Implicit Key",id:"treap-with-implicit-key",level:2}],p={toc:c},m="wrapper";function f(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"namespace Treap {\n  std::mt19937 gen(std::chrono::steady_clock::now().time_since_epoch().count());\n  std::uniform_int_distribution<uint32_t> dis;\n\n  class Node {\n  public:\n    int32_t k; uint32_t p;\n    Node *l = nullptr, *r = nullptr;\n    ~Node() { delete l; delete r; }\n  };\n\n  std::tuple<Node*, Node*> split(Node* t, int32_t k) {\n    if (!t)             return {nullptr, nullptr};\n    if (k < t->k)       { auto [tl, tr] = split(t->l, k); t->l = tr; return {tl, t}; }\n    else                { auto [tl, tr] = split(t->r, k); t->r = tl; return {t, tr}; }\n  }\n\n  Node* merge(Node* tl, Node* tr) {\n    if (!tl)            return tr;\n    if (!tr)            return tl;\n    if (tl->p > tr->p)  { tl->r = merge(tl->r, tr); return tl; }\n    else                { tr->l = merge(tl, tr->l); return tr; }\n  }\n\n  void insert(Node* &t, int32_t k) {\n    uint32_t p = dis(gen);\n    if (!t)             { t = new Node {k, p}; return; }\n    if (p > t->p)       { auto [tl, tr] = split(t, k); t = new Node {k, p, tl, tr}; }\n    else                { insert(k < t->k ? t->l : t->r, k); }\n  }\n\n  void erase(Node* &t, int32_t k) {\n    if (t->k == k)      { t = merge(t->l, t->r); return; }\n    else                { erase(k < t->k ? t->l : t->r, k); }\n  }\n};\n")),(0,a.kt)("h2",{id:"treap-with-implicit-key"},"Treap with Implicit Key"),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"Code",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="ImplicitTreap"',title:'"ImplicitTreap"'},"std::mt19937 gen(3);\nstd::uniform_int_distribution<> dis(0, INT_MAX);\n\ntemplate<typename E>\nclass ImplicitTreap {\nprivate:\n    class Node {\n    public:\n        E value;\n        Node* left = nullptr;\n        Node* right = nullptr;\n        int32_t size = 0;\n        int32_t priority = dis(gen);\n\n        void setLeft(Node* node) {\n            left = node;\n            applySizeInvariant();\n        }\n\n        void setRight(Node* node) {\n            right = node;\n            applySizeInvariant();\n        }\n\n        void applySizeInvariant() {\n            size = 1 + getSize(left) + getSize(right);\n        }\n\n        explicit Node(E element): value(element) {\n            applySizeInvariant();\n        }\n    };\n\n    Node* root = nullptr;\n\n    static int32_t getSize(Node* node) {\n        if (node == nullptr) return 0;\n        return node->size;\n    }\n\n    pair<Node*, Node*> split(Node* node, int32_t key, int32_t parentImplicitKey = 0) {\n        if (node == nullptr) return {nullptr, nullptr};\n        auto implicitKey = parentImplicitKey + getSize(node->left);\n\n        if (key <= implicitKey) {\n            auto [left, right] = split(node->left, key, parentImplicitKey);\n            node->setLeft(right);\n            return {left, node};\n        }\n        else {\n            auto [left, right] = split(node->right, key, 1 + implicitKey);\n            node->setRight(left);\n            return {node, right};\n        }\n    }\n\n    pair<Node*, E> erase(Node* node, int32_t key, int32_t parentImplicitKey = 0) {\n        auto implicitKey = parentImplicitKey + getSize(node->left);\n\n        if (key == implicitKey) {\n            return {merge(node->left, node->right), node->value};\n        }\n        else if (key < implicitKey) {\n            auto [newLeft, removedElement] = erase(node->left, key, parentImplicitKey);\n            node->setLeft(newLeft);\n            return {node, removedElement};\n        }\n        else {\n            auto [newRight, removedElement] = erase(node->right, key, 1 + implicitKey);\n            node->setRight(newRight);\n            return {node, removedElement};\n        }\n    }\n\n    Node* merge(Node* leftNode, Node* rightNode) {\n        if (leftNode == nullptr) return rightNode;\n        if (rightNode == nullptr) return leftNode;\n\n        if (leftNode->priority > rightNode->priority) {\n            leftNode->setRight(merge(leftNode->right, rightNode));\n            return leftNode;\n        }\n        else {\n            rightNode->setLeft(merge(leftNode, rightNode->left));\n            return rightNode;\n        }\n    }\n\npublic:\n    int32_t getSize() {\n        return getSize(root);\n    }\n\n    void add(E element) {\n        root = merge(root, new Node(element));\n    }\n\n    void add(int32_t index, E element) {\n        auto [left, right] = split(root, index);\n        root = merge(merge(left, new Node(element)), right);\n    }\n\n    E get(int32_t index) {\n        auto [leftWithIndexNode, right] = split(root, index + 1);\n        auto [left, indexNode] = split(leftWithIndexNode, index);\n        auto value = indexNode->value;\n        root = merge(merge(left, indexNode), right);\n        return value;\n    }\n\n    void set(int32_t index, E element) {\n        auto [leftWithIndexNode, right] = split(root, index + 1);\n        auto [left, indexNode] = split(leftWithIndexNode, index);\n        indexNode->value = element;\n        root = merge(merge(left, indexNode), right);\n    }\n\n    E removeAt(int32_t index) {\n        auto [newRoot, removedElement] = erase(root, index);\n        root = newRoot;\n        return removedElement;\n    }\n};\n"))),(0,a.kt)(l.Z,{value:"Verify",mdxType:"TabItem"},(0,a.kt)("div",{class:"verify-tab"},(0,a.kt)("div",{class:"verify"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Verification"',title:'"Verification"'},"ImplicitTreap<int> t;\n\nvoid print() {\n  for (int i = 0; i < t.getSize(); ++i) {\n      cout << t.get(i) << ' ';\n  }\n  cout << endl;\n}\n\nint main() {\n    t.add(2);\n    t.add(4);\n    t.add(3);\n    t.add(1);\n    t.add(8);\n    print();\n    t.add(3, 10);\n    print();\n    t.removeAt(2);\n    print();\n}\n"))),(0,a.kt)("div",{class:"output"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Output"',title:'"Output"'},"2 4 3 1 8 \n2 4 3 10 1 8 \n2 4 10 1 8 \n")))))))}f.isMDXComponent=!0}}]);