"use strict";(self.webpackChunkzen=self.webpackChunkzen||[]).push([[6786],{7942:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var a=n(959);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return n?a.createElement(f,i(i({ref:t},s),{},{components:n})):a.createElement(f,i({ref:t},s))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[u]="string"==typeof e?e:r,i[1]=c;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8062:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var a=n(8957),r=(n(959),n(7942));const o={title:"Knapsack Problem"},i=void 0,c={unversionedId:"cp/problems/knapsack-problem",id:"cp/problems/knapsack-problem",title:"Knapsack Problem",description:"",source:"@site/docs/cp/problems/knapsack-problem.mdx",sourceDirName:"cp/problems",slug:"/cp/problems/knapsack-problem",permalink:"/zen/cp/problems/knapsack-problem",draft:!1,editUrl:"https://github.com/vamsi3/zen/edit/master/docs/cp/problems/knapsack-problem.mdx",tags:[],version:"current",lastUpdatedAt:1694358037,formattedLastUpdatedAt:"Sep 10, 2023",frontMatter:{title:"Knapsack Problem"},sidebar:"cp",previous:{title:"Equal Partition",permalink:"/zen/cp/problems/equal-partition"},next:{title:"Largest Rectangle in Histogram",permalink:"/zen/cp/problems/largest-rectangle-in-histogram"}},l={},p=[],s={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <vector>\n#include <format>\n#include <algorithm>\n#include <ranges>\n\nclass KnapsackSolver {\nprivate:\n    class DpEntry {\n    public:\n        int totalValue = 0;\n        std::vector<int> itemIndices = {};\n    };\npublic:\n    class Item {\n    public:\n        int weight;\n        int value;\n    };\n\n    class Result {\n    public:\n        int maxTotalValue;\n        std::vector<int> itemIndices;\n    };\n\n    Result solve(std::vector<Item> const& items, int capacity) {\n        std::vector<DpEntry> dp(capacity + 1);\n\n        std::ranges::for_each(\n                items | std::views::enumerate,\n                [&, maxCapacityYet = 0] (auto const& indexItemPair) mutable {\n                    auto [index, item] = indexItemPair;\n\n                    maxCapacityYet += item.weight;\n                    maxCapacityYet = std::min(maxCapacityYet, capacity);\n\n                    for (int c = maxCapacityYet; c >= item.weight; --c) {\n                        int potentialTotalValue = item.value + dp[c - item.weight].totalValue;\n                        if (dp[c].totalValue < potentialTotalValue) {\n                            dp[c].totalValue = potentialTotalValue;\n                            dp[c].itemIndices = dp[c - item.weight].itemIndices;\n                            dp[c].itemIndices.push_back(index);\n                        }\n                    }\n                }\n        );\n\n        auto targetDpEntry = std::ranges::fold_left_first(dp, [](auto const& a, auto const& b) {\n            return (a.totalValue > b.totalValue) ? a : b;\n        });\n\n        return {\n            .maxTotalValue = targetDpEntry->totalValue,\n            .itemIndices = targetDpEntry->itemIndices,\n        };\n    }\n};\n\nint main() {\n    KnapsackSolver knapsackSolver;\n    auto solution = knapsackSolver.solve({{2, 4}, {3, 5}, {1, 3}, {4, 7}}, 5);\n\n    std::cout << std::format("maxTotalValue: {} | itemIndices: ", solution.maxTotalValue);\n    std::ranges::for_each(solution.itemIndices, [](auto const& index) { std::cout << std::format("{} ", index); });\n    std::cout << std::endl;\n}\n\n// maxTotalValue: 10 | itemIndices: 2 3\n')))}m.isMDXComponent=!0}}]);