"use strict";(self.webpackChunkzen=self.webpackChunkzen||[]).push([[239],{7942:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>g});var r=t(959);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=l(t),d=a,g=u["".concat(p,".").concat(d)]||u[d]||m[d]||i;return t?r.createElement(g,o(o({ref:n},s),{},{components:t})):r.createElement(g,o({ref:n},s))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var c={};for(var p in n)hasOwnProperty.call(n,p)&&(c[p]=n[p]);c.originalType=e,c[u]="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8256:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var r=t(8957),a=(t(959),t(7942));const i={title:"Implication Graph",sidebar_label:"Implication Graph"},o=void 0,c={unversionedId:"cp/graph/implication-graph",id:"cp/graph/implication-graph",title:"Implication Graph",description:"- Graph::SCC \u279d /cp/graph/scc",source:"@site/docs/cp/graph/implication-graph.mdx",sourceDirName:"cp/graph",slug:"/cp/graph/implication-graph",permalink:"/zen/cp/graph/implication-graph",draft:!1,editUrl:"https://github.com/vamsi3/zen/edit/master/docs/cp/graph/implication-graph.mdx",tags:[],version:"current",lastUpdatedAt:1694358037,formattedLastUpdatedAt:"Sep 10, 2023",frontMatter:{title:"Implication Graph",sidebar_label:"Implication Graph"},sidebar:"cp",previous:{title:"Hungarian Algorithm",permalink:"/zen/cp/graph/hungarian"},next:{title:"Lowest Common Ancestor",permalink:"/zen/cp/graph/lca"}},p={},l=[{value:"Code",id:"code",level:2}],s={toc:l},u="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{title:"INCLUDE",type:"note"},(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Graph::SCC")," \u279d ",(0,a.kt)("a",{parentName:"li",href:"/cp/graph/scc"},"/cp/graph/scc")))),(0,a.kt)("h2",{id:"code"},"Code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"namespace Graph {\n    template<int32_t N_> class ImplicationGraph {\n        static_assert(N_ > 0, \"N must be positive\");\n        static constexpr int32_t N = N_;\n\n    private:\n        Graph::SCC<N> scc;\n        int n;\n    \n    public:\n        ImplicationGraph() {}\n\n        void set(int n_) { n = n_; scc.set(2 * n + 1); }\n\n        void addClause(int u, int v) {\n            // add both since implication graph is a kind of\n            // skew-symmetric graph where x => y <=> ~y => ~x\n            scc.addEdge(u, v);\n            scc.addEdge(v ^ 1, u ^ 1);\n        }\n\n        vector<int> solve() {\n            vector<int> solution(n + 1, -1);\n            vector<vector<int>> components = scc.kosaraju();\n            for (auto& co : components) {\n                if (solution[co[0] >> 1] != -1) continue;\n                for (auto& u : co) {\n                    int x = u >> 1;\n                    if (solution[x] != -1) return {};\n                    solution[x] = u & 1;\n                }\n            }\n            return solution;\n        }\n    };\n}\n\nconstexpr int N = 1'000'005;\nGraph::ImplicationGraph<N> ig;\n\ninline void solve() {\n    int n, m; cin >> n >> m;\n    ig.set(n);\n    for (int i = 0; i < m; ++i) {\n        // input x => y\n        int x, y; bool x_negated, y_negated;\n        cin >> x >> x_negated >> y >> y_negated;\n        ig.addClause((x << 1) | x_negated, (y << 1) | y_negated);\n    }\n\n    vector<int> solution = ig.solve();\n    for (int i = 1; i <= n; ++i) {\n        cout << solution[i] << ' ';\n    }\n    cout << endl;\n}\n")))}m.isMDXComponent=!0}}]);