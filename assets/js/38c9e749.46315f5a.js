"use strict";(self.webpackChunkzen=self.webpackChunkzen||[]).push([[8880],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=l(n),u=i,v=m["".concat(s,".").concat(u)]||m[u]||d[u]||a;return n?r.createElement(v,c(c({ref:t},p),{},{components:n})):r.createElement(v,c({ref:t},p))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,c=new Array(a);c[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,c[1]=o;for(var l=2;l<a;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4607:function(e,t,n){var r=n(7294),i=n(4996);t.Z=function(e){var t=e.image,n=e.caption;return r.createElement("figure",null,r.createElement("img",{src:(0,i.Z)(t)}),n?r.createElement("figcaption",{align:"center"},n):null)}},5691:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return v},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return m}});var r=n(3117),i=n(102),a=(n(7294),n(3905)),c=n(4607),o=["components"],s={title:"Fenwick Tree / BIT"},l=void 0,p={unversionedId:"cp/data-structures/fenwick-tree",id:"cp/data-structures/fenwick-tree",title:"Fenwick Tree / BIT",description:"- Fenwick Tree",source:"@site/docs/cp/data-structures/fenwick-tree.mdx",sourceDirName:"cp/data-structures",slug:"/cp/data-structures/fenwick-tree",permalink:"/zen/cp/data-structures/fenwick-tree",editUrl:"https://github.com/vamsi3/zen/edit/master/docs/cp/data-structures/fenwick-tree.mdx",tags:[],version:"current",lastUpdatedAt:1648309952,formattedLastUpdatedAt:"3/26/2022",frontMatter:{title:"Fenwick Tree / BIT"},sidebar:"cp",previous:{title:"DSU / Union-Find",permalink:"/zen/cp/data-structures/dsu"},next:{title:"Binary Heap",permalink:"/zen/cp/data-structures/heap/binary-heap"}},d={},m=[{value:"Fenwick Tree in n-dimensions",id:"fenwick-tree-in-n-dimensions",level:2}],u={toc:m};function v(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Name Alias")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("ul",{parentName:"div"},(0,a.kt)("li",{parentName:"ul"},"Fenwick Tree"),(0,a.kt)("li",{parentName:"ul"},"Binary Indexed Tree (BIT)")))),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Indexing")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("ul",{parentName:"div"},(0,a.kt)("li",{parentName:"ul"},"Zero-based indexing: ",(0,a.kt)("inlineCode",{parentName:"li"},"x = (x & (x + 1)) - 1")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"x |= (x + 1)")),(0,a.kt)("li",{parentName:"ul"},"One-based indexing: ",(0,a.kt)("inlineCode",{parentName:"li"},"x -= (x & -x)")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"x += (x & -x)"))))),(0,a.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Completely untested code."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"template<typename T> class FenwickTree {\nprivate:\n    std::vector<T> bit;\n\npublic:\n    FenwickTree(int32_t size) { this->reset(size); }\n    void reset(int32_t size) { bit.assign(size, 0); }\n    T sum(int32_t l, int32_t r) const { return sum(r) - sum(l - 1); }\n    \n    T sum(int32_t x) const {\n        T sum = 0;\n        for (; x >= 0; x = (x & (x + 1)) - 1) sum += bit[x];\n        return sum;\n    }\n\n    void add(int32_t x, int32_t value) {\n        int32_t n = static_cast<int32_t>(bit.size());\n        for (; x < n; x |= (x + 1)) bit[x] += value;\n    }\n};\n")),(0,a.kt)("h2",{id:"fenwick-tree-in-n-dimensions"},"Fenwick Tree in n-dimensions"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"template<typename T> class FenwickTree2D {\nprivate:\n    std::vector<std::vector<T>> bit;\n\npublic:\n    FenwickTree2D(int32_t size) { this->reset(size); }\n    void reset(int32_t size) { bit.assign(size, 0); }\n    \n    T sum(int32_t a, int32_t b) const {\n        T sum = 0;\n        for (int32_t x = a; x >= 0; x = (x & (x + 1)) - 1)\n            for (int32_t y = b; y >= 0; y = (y & (y + 1)) - 1)\n                sum += bit[x][y];\n        return sum;\n    }\n\n    void add(int32_t a, int32_t b, int32_t value) {\n        int32_t n = static_cast<int32_t>(bit.size());\n        for (int32_t x = a; x < n; x |= (x + 1))\n            for (int32_t y = b; y < n; y |= (y + 1))\n                bit[x][y] += value;\n    }\n};\n")),(0,a.kt)("div",{style:{display:"flex",flexDirection:"row-reverse",float:"right"}},(0,a.kt)(c.Z,{image:"/cp/data-structures/fenwick-tree/fenwick-tree.png",mdxType:"Image"})))}v.isMDXComponent=!0}}]);