"use strict";(self.webpackChunkzen=self.webpackChunkzen||[]).push([[4163],{3905:function(n,e,t){t.d(e,{Zo:function(){return p},kt:function(){return f}});var r=t(7294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function c(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function a(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},i=Object.keys(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var u=r.createContext({}),s=function(n){var e=r.useContext(u),t=e;return n&&(t="function"==typeof n?n(e):c(c({},e),n)),t},p=function(n){var e=s(n.components);return r.createElement(u.Provider,{value:e},n.children)},l={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(n,e){var t=n.components,o=n.mdxType,i=n.originalType,u=n.parentName,p=a(n,["components","mdxType","originalType","parentName"]),d=s(t),f=o,m=d["".concat(u,".").concat(f)]||d[f]||l[f]||i;return t?r.createElement(m,c(c({ref:e},p),{},{components:t})):r.createElement(m,c({ref:e},p))}));function f(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var i=t.length,c=new Array(i);c[0]=d;var a={};for(var u in e)hasOwnProperty.call(e,u)&&(a[u]=e[u]);a.originalType=n,a.mdxType="string"==typeof n?n:o,c[1]=a;for(var s=2;s<i;s++)c[s]=t[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},902:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return a},contentTitle:function(){return u},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var r=t(7462),o=t(3366),i=(t(7294),t(3905)),c=["components"],a={title:"Strongly Connected Components",sidebar_label:"Strongly Connected Components"},u=void 0,s={unversionedId:"cp/graph/scc",id:"cp/graph/scc",title:"Strongly Connected Components",description:"Note",source:"@site/docs/cp/graph/scc.mdx",sourceDirName:"cp/graph",slug:"/cp/graph/scc",permalink:"/zen/cp/graph/scc",editUrl:"https://github.com/vamsi3/zen/edit/master/docs/cp/graph/scc.mdx",tags:[],version:"current",lastUpdatedAt:1641309238,formattedLastUpdatedAt:"1/4/2022",frontMatter:{title:"Strongly Connected Components",sidebar_label:"Strongly Connected Components"},sidebar:"cp",previous:{title:"Minimum Spanning Tree",permalink:"/zen/cp/graph/minimum-spanning-tree"},next:{title:"Arithmetic",permalink:"/zen/cp/math/arithmetic"}},p=[{value:"Note",id:"note",children:[],level:2},{value:"Code (Kosaraju&#39;s Algorithm)",id:"code-kosarajus-algorithm",children:[],level:2}],l={toc:p};function d(n){var e=n.components,t=(0,o.Z)(n,c);return(0,i.kt)("wrapper",(0,r.Z)({},l,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"note"},"Note"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Kosaraju's Algorithm will give us final SCCs in topological ordering of the condensation graph (the DAG after condensing SCCs into single nodes)")),(0,i.kt)("h2",{id:"code-kosarajus-algorithm"},"Code (Kosaraju's Algorithm)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"namespace Graph {\n    template<int32_t N_> class SCC {\n        static_assert(N_ > 0, \"N must be positive\");\n        static constexpr int32_t N = N_;\n    \n    private:\n        vector<int> in[N], ou[N];\n        bool vi[N];\n        int n;\n\n        void dfs(int u, vector<int>& p) {\n            if (vi[u]) return;\n            vi[u] = true;\n            for (auto& v : ou[u]) dfs(v, p);\n            p.push_back(u);\n        }\n\n        void dfs2(int u, vector<int>& co) {\n            if (vi[u]) return;\n            vi[u] = true;\n            co.push_back(u); // place this above or below children dfs as you wish\n            for (auto& v : in[u]) dfs2(v, co);\n        }\n\n    public:\n        SCC() {}\n\n        void set(int n_) { n = n_; for (int i = 1; i <= n; ++i) in[i].clear(), ou[i].clear(); }\n        void addEdge(int u, int v) { ou[u].push_back(v); in[v].push_back(u); }\n\n        vector<vector<int>> kosaraju() {\n            vector<int> p;\n            for (int u = 1; u <= n; ++u) vi[u] = false;\n            for (int u = 1; u <= n; ++u) dfs(u, p);\n            reverse(p.begin(), p.end());\n\n            vector<vector<int>> scc;\n            for (int u = 1; u <= n; ++u) vi[u] = false;\n            for (auto& u : p) {\n                vector<int> co;\n                dfs2(u, co);\n                if (!co.empty()) scc.push_back(co);\n            }\n            return scc;\n        }\n    };\n}\n\nconstexpr int N = 1'000'005;\nGraph::SCC<N> scc;\n\ninline void solve() {\n    int n, m; cin >> n >> m;\n    scc.set(n);\n    for (int i = 0; i < m; ++i) {\n        int u, v; cin >> u >> v;\n        scc.addEdge(u, v);\n    }\n\n    vector<vector<int>> components = scc.kosaraju();\n    for (auto& co : components) {\n        for (auto& u : co) {\n            cout << u << ' ';\n        }\n        cout << endl;\n    }\n}\n")))}d.isMDXComponent=!0}}]);