"use strict";(self.webpackChunkzen=self.webpackChunkzen||[]).push([[7559],{9613:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(9496);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=r.createContext({}),u=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(d.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,d=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=u(n),m=i,f=c["".concat(d,".").concat(m)]||c[m]||s[m]||l;return n?r.createElement(f,a(a({ref:t},p),{},{components:n})):r.createElement(f,a({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,a=new Array(l);a[0]=c;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:i,a[1]=o;for(var u=2;u<l;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1978:(e,t,n)=>{n.d(t,{Z:()=>a});var r=n(9496),i=n(5924);const l="tabItem_IPoj";function a(e){let{children:t,hidden:n,className:a}=e;return r.createElement("div",{role:"tabpanel",className:(0,i.Z)(l,a),hidden:n},t)}},2356:(e,t,n)=>{n.d(t,{Z:()=>m});var r=n(4250),i=n(9496),l=n(5924),a=n(9298),o=n(1461),d=n(3903),u=n(4539);const p="tabList_xr86",s="tabItem_r4_W";function c(e){var t;const{lazy:n,block:a,defaultValue:c,values:m,groupId:f,className:g}=e,v=i.Children.map(e.children,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=m??v.map((e=>{let{props:{value:t,label:n,attributes:r}}=e;return{value:t,label:n,attributes:r}})),h=(0,o.l)(y,((e,t)=>e.value===t.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const N=null===c?c:c??(null==(t=v.find((e=>e.props.default)))?void 0:t.props.value)??v[0].props.value;if(null!==N&&!y.some((e=>e.value===N)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${N}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:b,setTabGroupChoices:k}=(0,d.U)(),[w,x]=(0,i.useState)(N),T=[],{blockElementScrollPositionUntilNextRender:E}=(0,u.o5)();if(null!=f){const e=b[f];null!=e&&e!==w&&y.some((t=>t.value===e))&&x(e)}const _=e=>{const t=e.currentTarget,n=T.indexOf(t),r=y[n].value;r!==w&&(E(t),x(r),null!=f&&k(f,String(r)))},I=e=>{var t;let n=null;switch(e.key){case"Enter":_(e);break;case"ArrowRight":{const t=T.indexOf(e.currentTarget)+1;n=T[t]??T[0];break}case"ArrowLeft":{const t=T.indexOf(e.currentTarget)-1;n=T[t]??T[T.length-1];break}}null==(t=n)||t.focus()};return i.createElement("div",{className:(0,l.Z)("tabs-container",p)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":a},g)},y.map((e=>{let{value:t,label:n,attributes:a}=e;return i.createElement("li",(0,r.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:e=>T.push(e),onKeyDown:I,onClick:_},a,{className:(0,l.Z)("tabs__item",s,null==a?void 0:a.className,{"tabs__item--active":w===t})}),n??t)}))),n?(0,i.cloneElement)(v.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},v.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==w})))))}function m(e){const t=(0,a.Z)();return i.createElement(c,(0,r.Z)({key:String(t)},e))}},6562:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>d,default:()=>m,frontMatter:()=>o,metadata:()=>u,toc:()=>s});var r=n(4250),i=(n(9496),n(9613)),l=n(2356),a=n(1978);const o={title:"Treap",sidebar_label:"Treap"},d=void 0,u={unversionedId:"cp/data-structures/treap",id:"cp/data-structures/treap",title:"Treap",description:"Treap with Implicit Key",source:"@site/docs/cp/data-structures/treap.mdx",sourceDirName:"cp/data-structures",slug:"/cp/data-structures/treap",permalink:"/zen/cp/data-structures/treap",draft:!1,editUrl:"https://github.com/vamsi3/zen/edit/master/docs/cp/data-structures/treap.mdx",tags:[],version:"current",lastUpdatedAt:1667746530,formattedLastUpdatedAt:"Nov 6, 2022",frontMatter:{title:"Treap",sidebar_label:"Treap"},sidebar:"cp",previous:{title:"Tournament Tree",permalink:"/zen/cp/data-structures/tournament-tree"},next:{title:"Tree",permalink:"/zen/cp/data-structures/tree"}},p={},s=[{value:"Treap with Implicit Key",id:"treap-with-implicit-key",level:2}],c={toc:s};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"namespace Treap {\n  std::mt19937 gen(std::chrono::steady_clock::now().time_since_epoch().count());\n  std::uniform_int_distribution<uint32_t> dis;\n\n  class Node {\n  public:\n    int32_t k; uint32_t p;\n    Node *l = nullptr, *r = nullptr;\n    ~Node() { delete l; delete r; }\n  };\n\n  std::tuple<Node*, Node*> split(Node* t, int32_t k) {\n    if (!t)             return {nullptr, nullptr};\n    if (k < t->k)       { auto [tl, tr] = split(t->l, k); t->l = tr; return {tl, t}; }\n    else                { auto [tl, tr] = split(t->r, k); t->r = tl; return {t, tr}; }\n  }\n\n  Node* merge(Node* tl, Node* tr) {\n    if (!tl)            return tr;\n    if (!tr)            return tl;\n    if (tl->p > tr->p)  { tl->r = merge(tl->r, tr); return tl; }\n    else                { tr->l = merge(tl, tr->l); return tr; }\n  }\n\n  void insert(Node* &t, int32_t k) {\n    uint32_t p = dis(gen);\n    if (!t)             { t = new Node {k, p}; return; }\n    if (p > t->p)       { auto [tl, tr] = split(t, k); t = new Node {k, p, tl, tr}; }\n    else                { insert(k < t->k ? t->l : t->r, k); }\n  }\n\n  void erase(Node* &t, int32_t k) {\n    if (t->k == k)      { t = merge(t->l, t->r); return; }\n    else                { erase(k < t->k ? t->l : t->r, k); }\n  }\n};\n")),(0,i.kt)("h2",{id:"treap-with-implicit-key"},"Treap with Implicit Key"),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(a.Z,{value:"Code",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="ImplicitTreap"',title:'"ImplicitTreap"'},"std::mt19937 gen(3);\nstd::uniform_int_distribution<> dis(0, INT_MAX);\n\ntemplate<typename E>\nclass ImplicitTreap {\nprivate:\n    class Node {\n    public:\n        E value;\n        Node* left = nullptr;\n        Node* right = nullptr;\n        int32_t size = 0;\n        int32_t priority = dis(gen);\n\n        void setLeft(Node* node) {\n            left = node;\n            applySizeInvariant();\n        }\n\n        void setRight(Node* node) {\n            right = node;\n            applySizeInvariant();\n        }\n\n        void applySizeInvariant() {\n            size = 1 + getSize(left) + getSize(right);\n        }\n\n        explicit Node(E element): value(element) {\n            applySizeInvariant();\n        }\n    };\n\n    Node* root = nullptr;\n\n    static int32_t getSize(Node* node) {\n        if (node == nullptr) return 0;\n        return node->size;\n    }\n\n    pair<Node*, Node*> split(Node* node, int32_t key, int32_t parentImplicitKey = 0) {\n        if (node == nullptr) return {nullptr, nullptr};\n        auto implicitKey = parentImplicitKey + getSize(node->left);\n\n        if (key <= implicitKey) {\n            auto [left, right] = split(node->left, key, parentImplicitKey);\n            node->setLeft(right);\n            return {left, node};\n        }\n        else {\n            auto [left, right] = split(node->right, key, 1 + implicitKey);\n            node->setRight(left);\n            return {node, right};\n        }\n    }\n\n    pair<Node*, E> erase(Node* node, int32_t key, int32_t parentImplicitKey = 0) {\n        auto implicitKey = parentImplicitKey + getSize(node->left);\n\n        if (key == implicitKey) {\n            return {merge(node->left, node->right), node->value};\n        }\n        else if (key < implicitKey) {\n            auto [newLeft, removedElement] = erase(node->left, key, parentImplicitKey);\n            node->setLeft(newLeft);\n            return {node, removedElement};\n        }\n        else {\n            auto [newRight, removedElement] = erase(node->right, key, 1 + implicitKey);\n            node->setRight(newRight);\n            return {node, removedElement};\n        }\n    }\n\n    Node* merge(Node* leftNode, Node* rightNode) {\n        if (leftNode == nullptr) return rightNode;\n        if (rightNode == nullptr) return leftNode;\n\n        if (leftNode->priority > rightNode->priority) {\n            leftNode->setRight(merge(leftNode->right, rightNode));\n            return leftNode;\n        }\n        else {\n            rightNode->setLeft(merge(leftNode, rightNode->left));\n            return rightNode;\n        }\n    }\n\npublic:\n    int32_t getSize() {\n        return getSize(root);\n    }\n\n    void add(E element) {\n        root = merge(root, new Node(element));\n    }\n\n    void add(int32_t index, E element) {\n        auto [left, right] = split(root, index);\n        root = merge(merge(left, new Node(element)), right);\n    }\n\n    E get(int32_t index) {\n        auto [leftWithIndexNode, right] = split(root, index + 1);\n        auto [left, indexNode] = split(leftWithIndexNode, index);\n        auto value = indexNode->value;\n        root = merge(merge(left, indexNode), right);\n        return value;\n    }\n\n    void set(int32_t index, E element) {\n        auto [leftWithIndexNode, right] = split(root, index + 1);\n        auto [left, indexNode] = split(leftWithIndexNode, index);\n        indexNode->value = element;\n        root = merge(merge(left, indexNode), right);\n    }\n\n    E removeAt(int32_t index) {\n        auto [newRoot, removedElement] = erase(root, index);\n        root = newRoot;\n        return removedElement;\n    }\n};\n"))),(0,i.kt)(a.Z,{value:"Verify",mdxType:"TabItem"},(0,i.kt)("div",{class:"verify-tab"},(0,i.kt)("div",{class:"verify"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Verification"',title:'"Verification"'},"ImplicitTreap<int> t;\n\nvoid print() {\n  for (int i = 0; i < t.getSize(); ++i) {\n      cout << t.get(i) << ' ';\n  }\n  cout << endl;\n}\n\nint main() {\n    t.add(2);\n    t.add(4);\n    t.add(3);\n    t.add(1);\n    t.add(8);\n    print();\n    t.add(3, 10);\n    print();\n    t.removeAt(2);\n    print();\n}\n"))),(0,i.kt)("div",{class:"output"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Output"',title:'"Output"'},"2 4 3 1 8 \n2 4 3 10 1 8 \n2 4 10 1 8 \n")))))))}m.isMDXComponent=!0}}]);