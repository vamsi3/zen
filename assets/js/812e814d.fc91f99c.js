"use strict";(self.webpackChunkzen=self.webpackChunkzen||[]).push([[5501],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),f=c(n),d=o,m=f["".concat(p,".").concat(d)]||f[d]||l[d]||a;return n?r.createElement(m,i(i({ref:t},s),{},{components:n})):r.createElement(m,i({ref:t},s))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=f;var u={};for(var p in t)hasOwnProperty.call(t,p)&&(u[p]=t[p]);u.originalType=e,u.mdxType="string"==typeof e?e:o,i[1]=u;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},796:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return u},metadata:function(){return c},toc:function(){return l}});var r=n(3117),o=n(102),a=(n(7294),n(3905)),i=["components"],u={title:"Disjoint-set (DSU) / Union-Find",sidebar_label:"DSU / Union-Find"},p=void 0,c={unversionedId:"cp/data-structures/dsu",id:"cp/data-structures/dsu",title:"Disjoint-set (DSU) / Union-Find",description:"Notes",source:"@site/docs/cp/data-structures/dsu.mdx",sourceDirName:"cp/data-structures",slug:"/cp/data-structures/dsu",permalink:"/zen/cp/data-structures/dsu",editUrl:"https://github.com/vamsi3/zen/edit/master/docs/cp/data-structures/dsu.mdx",tags:[],version:"current",lastUpdatedAt:1657897032,formattedLastUpdatedAt:"7/15/2022",frontMatter:{title:"Disjoint-set (DSU) / Union-Find",sidebar_label:"DSU / Union-Find"},sidebar:"cp",previous:{title:"Subset Transforms (DP)",permalink:"/zen/cp/algorithms/subset-transforms"},next:{title:"Fenwick Tree / BIT",permalink:"/zen/cp/data-structures/fenwick-tree"}},s={},l=[{value:"Notes",id:"notes",level:2}],f={toc:l};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"namespace DSU {\n    /**\n    * @brief: vector `p` contains -(size of tree) if p is a  root else ID of parent in tree.\n    */\n    class DSU {\n    public:\n        vector<int> p;\n\n        DSU(int32_t n) { p.assign(n, -1); }\n\n        int root(int32_t v) { return (p[v] < 0) ? v : p[v] = root(p[v]); }\n        bool same(int32_t u, int32_t v) { return root(u) == root(v); }\n\n        /**\n        * @return: `true` if u, v are not already in same tree.\n        */\n        inline bool join(int32_t u, int32_t v) {\n            if ((u = root(u)) == (v = root(v))) return false;\n            if (p[u] > p[v]) swap(u, v);\n            p[u] += p[v]; p[v] = u; return true;\n        }\n    };\n}\n\n")),(0,a.kt)("h2",{id:"notes"},"Notes"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The root node of the Tree contains the ",(0,a.kt)("inlineCode",{parentName:"p"},"-(size of subtree)")," . All other nodes contain ",(0,a.kt)("inlineCode",{parentName:"p"},"Parent ID"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"DSU::root")," function can also be implemented ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("u",null,"iteratively"))," as below"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"int root(int32_t v) {\n  if (p[v] < 0) return v;\n  int r = v; while (p[r] >= 0) r = p[r];\n  while (p[v] >= 0) { auto pa = p[v]; p[v] = r; v = pa; }\n  return r;\n}\n")))}d.isMDXComponent=!0}}]);