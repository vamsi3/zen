"use strict";(self.webpackChunkzen=self.webpackChunkzen||[]).push([[8275],{7942:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>g});var n=r(959);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,i=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),d=p(r),u=s,g=d["".concat(l,".").concat(u)]||d[u]||m[u]||i;return r?n.createElement(g,o(o({ref:t},c),{},{components:r})):n.createElement(g,o({ref:t},c))}));function g(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var i=r.length,o=new Array(i);o[0]=u;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[d]="string"==typeof e?e:s,o[1]=a;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},9292:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>a,toc:()=>p});var n=r(8957),s=(r(959),r(7942));const i={title:"Merge K sorted lists"},o=void 0,a={unversionedId:"cp/problems/merge-k-sorted-lists",id:"cp/problems/merge-k-sorted-lists",title:"Merge K sorted lists",description:"Given an array of \u2018K\u2019 sorted LinkedLists, merge them into one sorted list.",source:"@site/docs/cp/problems/merge-k-sorted-lists.mdx",sourceDirName:"cp/problems",slug:"/cp/problems/merge-k-sorted-lists",permalink:"/zen/cp/problems/merge-k-sorted-lists",draft:!1,editUrl:"https://github.com/vamsi3/zen/edit/master/docs/cp/problems/merge-k-sorted-lists.mdx",tags:[],version:"current",lastUpdatedAt:1694358037,formattedLastUpdatedAt:"Sep 10, 2023",frontMatter:{title:"Merge K sorted lists"},sidebar:"cp",previous:{title:"Largest sum of contiguous subarray no larger than K",permalink:"/zen/cp/problems/largest-sum-of-contiguous-subarray-no-larger-than-k"},next:{title:"Number Of Divisors",permalink:"/zen/cp/problems/number-of-divisors"}},l={},p=[],c={toc:p},d="wrapper";function m(e){let{components:t,...r}=e;return(0,s.kt)(d,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("admonition",{title:"PROBLEM",type:"note"},(0,s.kt)("p",{parentName:"admonition"},"Given an array of \u2018K\u2019 sorted LinkedLists, merge them into one sorted list.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <vector>\n#include <list>\n#include <queue>\n#include <algorithm>\n#include <ranges>\n#include <format>\n\ntemplate<typename T>\nclass ListMergerInterface {\npublic:\n    virtual std::list<T> merge(std::vector<std::list<T>>& lists) = 0;\n    virtual std::list<T> merge(std::vector<std::list<T>>&& lists) = 0;\n};\n\ntemplate<typename T>\nclass ListMerger: private ListMergerInterface<T> {\n    template<typename U, typename Comp>\n    using MinHeap = std::priority_queue<U, std::vector<U>, Comp>;\n\npublic:\n    std::list<T> merge(std::vector<std::list<T>>&& lists) override {\n        return merge(lists);\n    }\n\n    std::list<T> merge(std::vector<std::list<T>>& lists) override {\n        using ListIterator = std::list<T>::const_iterator;\n\n        auto heapComp = [](auto const& a, auto const& b) { return *std::get<0>(a) > *std::get<0>(b); };\n        MinHeap<std::pair<ListIterator, int>, decltype(heapComp)> heap(heapComp);\n\n        std::ranges::for_each(lists | std::views::enumerate, [&](auto enumeratedList) {\n            auto [index, list] = enumeratedList;\n            heap.emplace(list.cbegin(), index);\n        });\n\n        std::list<T> mergedList;\n\n        while (!heap.empty()) {\n            auto [curIt, index] = heap.top();\n            heap.pop();\n\n            auto nextIt = std::next(curIt);\n            if (nextIt != lists[index].cend()) {\n                heap.emplace(nextIt, index);\n            }\n\n            mergedList.splice(mergedList.cend(), lists[index], curIt);\n        }\n\n        return mergedList;\n    }\n};\n\nint main() {\n    ListMerger<int> listMerger;\n    std::vector<std::list<int>> v = {std::list {1, 4, 7, 10}, std::list {3, 5, 6}, std::list {2, 8, 9}};\n    auto mergedList = listMerger.merge(v);\n\n    for (auto num : mergedList) {\n        std::cout << std::format("{} ", num);\n    }\n}\n\n// 1 2 3 4 5 6 7 8 9 10 \n')))}m.isMDXComponent=!0}}]);