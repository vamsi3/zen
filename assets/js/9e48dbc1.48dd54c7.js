"use strict";(self.webpackChunkzen=self.webpackChunkzen||[]).push([[6487],{9613:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(9496);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(t),m=a,g=p["".concat(s,".").concat(m)]||p[m]||d[m]||i;return t?r.createElement(g,o(o({ref:n},u),{},{components:t})):r.createElement(g,o({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},6993:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=t(4250),a=(t(9496),t(9613));const i={title:"Competitive Programming",slug:"/",sidebar_label:"Home",sidebar_position:1},o=void 0,l={unversionedId:"cp/home",id:"cp/home",title:"Competitive Programming",description:"This contains all the template code and resources for CP.",source:"@site/docs/cp/home.mdx",sourceDirName:"cp",slug:"/",permalink:"/zen/",draft:!1,editUrl:"https://github.com/vamsi3/zen/edit/master/docs/cp/home.mdx",tags:[],version:"current",lastUpdatedAt:1667746530,formattedLastUpdatedAt:"Nov 6, 2022",sidebarPosition:1,frontMatter:{title:"Competitive Programming",slug:"/",sidebar_label:"Home",sidebar_position:1},sidebar:"cp",next:{title:"Ad hoc",permalink:"/zen/category/ad-hoc"}},s={},c=[{value:"C++ Template",id:"c-template",level:2},{value:"Stack Limit",id:"stack-limit",level:2},{value:"Debug Code",id:"debug-code",level:2},{value:"Measuring Time",id:"measuring-time",level:2},{value:"Pragma GCC Optimizations",id:"pragma-gcc-optimizations",level:2},{value:"Kotlin Template",id:"kotlin-template",level:2},{value:"Java Template",id:"java-template",level:2}],u={toc:c};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This contains all the template code and resources for CP."),(0,a.kt)("h2",{id:"c-template"},"C++ Template"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// Author: Vamsi Krishna Reddy Satti\n// With love for Competitive Programming!\n\n#include <bits/stdc++.h>\nusing namespace std;\n\nstatic inline __attribute__((always_inline)) void solve() {\n\n}\n\nint main() {\n  ios::sync_with_stdio(false); cin.tie(nullptr);\n  int t = 1;\n  // cin >> t;\n  for (int i = 1; i <= t; ++i) {\n    solve();\n  }\n}\n")),(0,a.kt)("h2",{id:"stack-limit"},"Stack Limit"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"ulimit -s unlimited   # set stack limit\nulimit -c             # check if command worked\n./a.out               # execute your code\n")),(0,a.kt)("h2",{id:"debug-code"},"Debug Code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'// Credits: tourist\n\nstring to_string(const string& s) { return \'"\' + s + \'"\'; }\nvoid debug_out() { cout << endl; }\ntemplate <typename Head, typename... Tail>\nvoid debug_out(Head H, Tail... T) { cout << " " << to_string(H); debug_out(T...); }\n#ifdef LOCAL\n  #define debug(...) cout << "#" << __LINE__ << " [" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)\n#else\n  #define debug(...) 3;\n#endif\n')),(0,a.kt)("h2",{id:"measuring-time"},"Measuring Time"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'auto tick = chrono::high_resolution_clock::now();\nauto tock = chrono::high_resolution_clock::now();\ncout << chrono::duration_cast<chrono::milliseconds>(tock - tick).count() << " ms\\n";\n')),(0,a.kt)("h2",{id:"pragma-gcc-optimizations"},"Pragma GCC Optimizations"),(0,a.kt)("admonition",{title:"Resources",type:"info"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("a",{parentName:"p",href:"https://codeforces.com/blog/entry/96344"},"https://codeforces.com/blog/entry/96344"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#pragma comment(linker, "/stack:200000000")\n#pragma GCC optimize("O3,unroll-loops")\n#pragma GCC target("avx2,bmi,bmi2,lzcnt,popcnt")\n')),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"kotlin-template"},"Kotlin Template"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'// Author: Vamsi Krishna Reddy Satti\n// With love for Competitive Programming!\n    @JvmField val INPUT = System.`in`\n    @JvmField val OUTPUT = System.out\n\n    @JvmField val _reader = INPUT.bufferedReader()\n    fun readLine(): String? = _reader.readLine()\n    fun readLn() = _reader.readLine()!!\n    @JvmField var _tokenizer: java.util.StringTokenizer = java.util.StringTokenizer("")\n    fun read(): String {\n        while (_tokenizer.hasMoreTokens().not()) _tokenizer = java.util.StringTokenizer(_reader.readLine() ?: return "", " ")\n        return _tokenizer.nextToken()\n    }\n    fun readInt() = read().toInt()\n    fun readDouble() = read().toDouble()\n    fun readLong() = read().toLong()\n    fun readStrings(n: Int) = List(n) { read() }\n    fun readLines(n: Int) = List(n) { readLn() }\n    fun readInts(n: Int) = List(n) { read().toInt() }\n    fun readIntArray(n: Int) = IntArray(n) { read().toInt() }\n    fun readDoubles(n: Int) = List(n) { read().toDouble() }\n    fun readDoubleArray(n: Int) = DoubleArray(n) { read().toDouble() }\n    fun readLongs(n: Int) = List(n) { read().toLong() }\n    fun readLongArray(n: Int) = LongArray(n) { read().toLong() }\n\n    @JvmField val _writer = java.io.PrintWriter(OUTPUT, false)\n    inline fun output(block: java.io.PrintWriter.() -> Unit) { _writer.apply(block).flush() }\n\nfun solve() {\n\n}\n\n\nfun main() {\n    output {\n        var t = 1\n        // var t = readInt()\n        for (i in 1..t) solve()\n    }\n}\n')),(0,a.kt)("h2",{id:"java-template"},"Java Template"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\n\npublic class Main {\n    static FastScanner is = new FastScanner();\n    static PrintWriter os = new PrintWriter(System.out);\n\n    public static void main(String[] args) {\n        int t = is.readInt();\n        for (int i = 0; i < t; ++i) solve();\n        os.close();\n    }\n\n    static void solve() {\n        int n = is.readInt();\n        for (int i = 0; i < n; ++i) os.print(i * i + " ");\n        os.println();\n    }\n\n    static class FastScanner {\n        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer stringTokenizer = new StringTokenizer("");\n\n        String readString() {\n            while (!stringTokenizer.hasMoreTokens()) {\n                try {\n                    stringTokenizer = new StringTokenizer(bufferedReader.readLine());\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            return stringTokenizer.nextToken();\n        }\n\n        int readInt() {\n            return Integer.parseInt(readString());\n        }\n\n        int[] readArray(int n) {\n            int[] a = new int[n];\n            for (int i = 0; i < n; ++i) a[i] = readInt();\n            return a;\n        }\n\n        long readLong() {\n            return Long.parseLong(readString());\n        }\n    }\n}\n')))}d.isMDXComponent=!0}}]);