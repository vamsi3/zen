"use strict";(self.webpackChunkzen=self.webpackChunkzen||[]).push([[8241],{7942:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(959);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(t),m=i,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||o;return t?r.createElement(f,a(a({ref:n},c),{},{components:t})):r.createElement(f,a({ref:n},c))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:i,a[1]=s;for(var u=2;u<o;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4452:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var r=t(8957),i=(t(959),t(7942));const o={title:"Equal Partition"},a=void 0,s={unversionedId:"cp/problems/equal-partition",id:"cp/problems/equal-partition",title:"Equal Partition",description:"Given a set of positive numbers, find if we can partition it into two subsets such that the sum of elements in both subsets is equal.",source:"@site/docs/cp/problems/equal-partition.mdx",sourceDirName:"cp/problems",slug:"/cp/problems/equal-partition",permalink:"/zen/cp/problems/equal-partition",draft:!1,editUrl:"https://github.com/vamsi3/zen/edit/master/docs/cp/problems/equal-partition.mdx",tags:[],version:"current",lastUpdatedAt:1694358037,formattedLastUpdatedAt:"Sep 10, 2023",frontMatter:{title:"Equal Partition"},sidebar:"cp",previous:{title:"Combination Sum",permalink:"/zen/cp/problems/combination-sum"},next:{title:"Knapsack Problem",permalink:"/zen/cp/problems/knapsack-problem"}},l={},u=[],c={toc:u},p="wrapper";function d(e){let{components:n,...t}=e;return(0,i.kt)(p,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"PROBLEM",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Given a set of positive numbers, find if we can partition it into two subsets such that the sum of elements in both subsets is equal.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <vector>\n#include <format>\n#include <algorithm>\n#include <ranges>\n#include <numeric>\n#include <any>\n\nclass EqualPartitionSolver {\nprivate:\n    class DpEntry {\n    public:\n        bool isPossible = false;\n        std::vector<int> indices = {};\n    };\npublic:\n    std::optional<std::vector<int>> solve(std::vector<int> const& values) {\n        if (values.empty()) {\n            return std::vector<int> {};\n        }\n\n        auto sum = std::reduce(values.cbegin(), values.cend());\n\n        if (sum % 2 == 1) {\n            return {};\n        }\n\n        int halfSum = sum / 2;\n\n        std::vector<DpEntry> dp(halfSum + 1);\n        dp[0].isPossible = true;\n\n        std::ranges::for_each(\n                values | std::views::enumerate,\n                [&, maxSumYet = 0] (auto const& indexValueTuple) mutable {\n                    auto [index, value] = indexValueTuple;\n\n                    maxSumYet += value;\n                    maxSumYet = std::min(maxSumYet, halfSum);\n\n                    for (int c = maxSumYet; c >= value; --c) {\n                        if (dp[c].isPossible) {\n                            continue;\n                        }\n\n                        if (!dp[c - value].isPossible) {\n                            continue;\n                        }\n\n                        dp[c].isPossible = true;\n                        dp[c].indices = dp[c - value].indices;\n                        dp[c].indices.push_back(index);\n                    }\n                }\n        );\n\n        if (!dp[halfSum].isPossible) {\n            return {};\n        }\n\n        return dp[halfSum].indices;\n    }\n};\n\nint main() {\n    EqualPartitionSolver equalPartitionSolver;\n\n    auto solution = equalPartitionSolver.solve({1, 1, 3, 4, 7});\n\n    std::cout << std::format("isPossible: {}", solution.has_value()) << std::endl;\n\n    solution.and_then([](auto const& indices) -> std::optional<std::any> {\n        std::cout << "indices: ";\n        std::ranges::for_each(indices, [](auto const& index) { std::cout << std::format("{} ", index); });\n        std::cout  << std::endl;\n        return {};\n    });\n}\n\n/*\n * isPossible: true\n * indices: 0 2 3\n */\n')))}d.isMDXComponent=!0}}]);