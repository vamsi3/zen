"use strict";(self.webpackChunkzen=self.webpackChunkzen||[]).push([[6033],{7942:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>_});var r=n(959);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,_=u["".concat(p,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(_,a(a({ref:t},l),{},{components:n})):r.createElement(_,a({ref:t},l))}));function _(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[u]="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2046:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(8957),o=(n(959),n(7942));const i={title:"Notes"},a=void 0,s={unversionedId:"cpp/notes",id:"cpp/notes",title:"Notes",description:"std::numeric_limits",source:"@site/docs/cpp/notes.mdx",sourceDirName:"cpp",slug:"/cpp/notes",permalink:"/zen/cpp/notes",draft:!1,editUrl:"https://github.com/vamsi3/zen/edit/master/docs/cpp/notes.mdx",tags:[],version:"current",lastUpdatedAt:1694358037,formattedLastUpdatedAt:"Sep 10, 2023",frontMatter:{title:"Notes"},sidebar:"cpp",previous:{title:"lvalues & rvalues + Move Semantics & rvalue References",permalink:"/zen/cpp/lvalue-rvalue"},next:{title:"Object Oriented Programming",permalink:"/zen/cpp/oop"}},p={},c=[{value:"<code>std::numeric_limits</code>",id:"stdnumeric_limits",level:4},{value:"<code>std::midpoint</code>",id:"stdmidpoint",level:4},{value:"<code>std::rotate</code>",id:"stdrotate",level:4}],l={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"stdnumeric_limits"},(0,o.kt)("inlineCode",{parentName:"h4"},"std::numeric_limits")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <numeric>\n\nauto x1 = std::numeric_limits<int32_t>::min() // x1 = -2^31 = -2147483648\nauto x2 = std::numeric_limits<int32_t>::max() // x2 = 2^31-1 = 2147483647\n")),(0,o.kt)("h4",{id:"stdmidpoint"},(0,o.kt)("inlineCode",{parentName:"h4"},"std::midpoint")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"// template< class T >\n// constexpr T midpoint( T a, T b ) noexcept;\n// (since C++20)\n\n#include <numeric>\n\nauto x1 = std::numeric_limits<int32_t>::max(); // x1 = 2147483647\nauto x2 = std::midpoint(x1, x1 - 2); // x2 = 2147483646\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"// template< class T >\n// constexpr T* midpoint( T* a, T* b );\n// (since C++20)\n\n#include <numeric>\n\nstd::array<int32_t, 7> x1 = {5, 9, 2, 3, 1, 4, 6};\nint* x2 = std::midpoint(std::next(x1.begin(), 2), x1.end()); // *x2 = 1\n")),(0,o.kt)("h4",{id:"stdrotate"},(0,o.kt)("inlineCode",{parentName:"h4"},"std::rotate")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\n#include <vector>\n#include <array>\n#include <format>\n\nclass DisjointSet {\n    std::vector<int32_t> _parent;\n\n    [[nodiscard]] int32_t _get_root(int32_t element) const {\n        while (_parent[element] >= 0) {\n            element = _parent[element];\n        }\n        return element;\n    }\n\n    int32_t _get_root_and_reassign_parents(int32_t element) {\n        auto root = _get_root(element);\n        while (true) {\n            auto& parent = _parent[element];\n            if (parent < 0) {\n                break;\n            }\n            element = parent;\n            parent = root;\n        }\n        return root;\n    }\n\npublic:\n    explicit DisjointSet(int32_t size) {\n        _parent.assign(size, -1);\n    }\n\n    /**\n     * @return `true` if u, v are not already in same set.\n     */\n    bool merge(int32_t u, int32_t v) {\n        auto root_u = _get_root_and_reassign_parents(u);\n        auto root_v = _get_root_and_reassign_parents(v);\n\n        if (root_u == root_v) {\n            return false;\n        }\n\n        if (_parent[root_u] > _parent[root_v]) {\n            std::swap(root_u, root_v);\n        }\n\n        _parent[root_u] += _parent[root_v];\n        _parent[root_v] = u;\n        return true;\n    }\n\n    bool is_same_set(int32_t u, int32_t v) {\n        auto root_u = _get_root_and_reassign_parents(u);\n        auto root_v = _get_root_and_reassign_parents(v);\n\n        return root_u == root_v;\n    }\n};\n\nint main() {\n    auto disjoint_set = DisjointSet(5);\n    disjoint_set.merge(2, 3);\n    disjoint_set.merge(3, 5);\n    std::cout << disjoint_set.is_same_set(2, 5); // 1\n}\n")))}d.isMDXComponent=!0}}]);