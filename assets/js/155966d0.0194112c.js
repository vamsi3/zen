"use strict";(self.webpackChunkzen=self.webpackChunkzen||[]).push([[1923],{3905:function(t,e,n){n.d(e,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function c(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var u=r.createContext({}),i=function(t){var e=r.useContext(u),n=e;return t&&(n="function"==typeof t?t(e):s(s({},e),t)),n},p=function(t){var e=i(t.components);return r.createElement(u.Provider,{value:e},t.children)},l={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},f=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,o=t.originalType,u=t.parentName,p=c(t,["components","mdxType","originalType","parentName"]),f=i(n),m=a,g=f["".concat(u,".").concat(m)]||f[m]||l[m]||o;return n?r.createElement(g,s(s({ref:e},p),{},{components:n})):r.createElement(g,s({ref:e},p))}));function m(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=n.length,s=new Array(o);s[0]=f;var c={};for(var u in e)hasOwnProperty.call(e,u)&&(c[u]=e[u]);c.originalType=t,c.mdxType="string"==typeof t?t:a,s[1]=c;for(var i=2;i<o;i++)s[i]=n[i];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},7929:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return c},contentTitle:function(){return u},metadata:function(){return i},toc:function(){return p},default:function(){return f}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),s=["components"],c={title:"RegEx",sidebar_label:"RegEx"},u=void 0,i={unversionedId:"cp/data-structures/regex",id:"cp/data-structures/regex",title:"RegEx",description:"Thompson's NFA",source:"@site/docs/cp/data-structures/regex.mdx",sourceDirName:"cp/data-structures",slug:"/cp/data-structures/regex",permalink:"/zen/cp/data-structures/regex",editUrl:"https://github.com/vamsi3/zen/edit/master/docs/cp/data-structures/regex.mdx",tags:[],version:"current",lastUpdatedAt:1634748217,formattedLastUpdatedAt:"10/20/2021",frontMatter:{title:"RegEx",sidebar_label:"RegEx"},sidebar:"cp",previous:{title:"Singly Linked List",permalink:"/zen/cp/data-structures/linked-list"},next:{title:"Segment Tree",permalink:"/zen/cp/data-structures/segment-tree"}},p=[{value:"Thompson&#39;s NFA",id:"thompsons-nfa",children:[],level:2}],l={toc:p};function f(t){var e=t.components,n=(0,a.Z)(t,s);return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"thompsons-nfa"},"Thompson's NFA"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <bits/stdc++.h>\nusing namespace std;\n\nclass State {\npublic:\n    int c;\n    State* out;\n    State* out1;\n\n    State(int c, State* out, State* out1) : c(c), out(out), out1(out1) {}\n};\n\nclass NFAFragment {\npublic:\n    State* start;\n    list<State**> out_list;\n\n    NFAFragment(State* start, list<State**> out_list) : start(start), out_list(out_list) {}\n\n    void join(State* s) { for (auto& out : out_list) *out = s; }\n};\n\nState* post2nfa(string postfix_regex) {\n    const static int SPLIT = 256;\n    const static int MATCH = 257;\n\n    stack<NFAFragment> fragment_stack;\n    for (auto& c : postfix_regex) {\n        switch (c) {\n            case '.': {\n                auto f2 = fragment_stack.top(); fragment_stack.pop();\n                auto f1 = fragment_stack.top(); fragment_stack.pop();\n                f1.join(f2.start);\n                fragment_stack.emplace(f1.start, f2.out_list);\n                break;\n            }\n            case '|': {\n                auto f2 = fragment_stack.top(); fragment_stack.pop();\n                auto f1 = fragment_stack.top(); fragment_stack.pop();\n                auto* s = new State(SPLIT, f1.start, f2.start);\n                f1.out_list.splice(f1.out_list.end(), f2.out_list);\n                fragment_stack.emplace(s, f1.out_list);\n                break;\n            }\n            case '?': {\n                auto f = fragment_stack.top(); fragment_stack.pop();\n                auto* s = new State(SPLIT, f.start, nullptr);\n                f.out_list.push_back(&s->out1);\n                fragment_stack.emplace(s, f.out_list);\n                break;\n            }\n            case '*': {\n                auto f = fragment_stack.top(); fragment_stack.pop();\n                auto* s = new State(SPLIT, f.start, nullptr);\n                f.join(s);\n                fragment_stack.emplace(s, list<State**> {&s->out1});\n                break;\n            }\n            case '+': {\n                auto f = fragment_stack.top(); fragment_stack.pop();\n                auto* s = new State(SPLIT, f.start, nullptr);\n                f.join(s);\n                fragment_stack.emplace(f.start, list<State**> {&s->out1});\n                break;\n            }\n            default: {\n                auto* s = new State(c, nullptr, nullptr);\n                fragment_stack.emplace(s, list<State**> {&s->out});\n            }\n        }\n    }\n    auto f = fragment_stack.top();\n    f.join(new State(MATCH, nullptr, nullptr));\n    return f.start;\n}\n\n// TODO\n\ninline void solve() {\n    // TODO\n}\n")))}f.isMDXComponent=!0}}]);