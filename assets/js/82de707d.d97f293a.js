"use strict";(self.webpackChunkzen=self.webpackChunkzen||[]).push([[5361],{9613:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var r=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,f=u["".concat(p,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(f,l(l({ref:t},s),{},{components:n})):r.createElement(f,l({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4479:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=n(2081),a=(n(9496),n(9613));const i={title:"User-defined Literals",sidebar_label:"User-defined Literals"},l=void 0,o={unversionedId:"cpp/language/user-defined-literal",id:"cpp/language/user-defined-literal",title:"User-defined Literals",description:"Note that a literal should start with an underscore _. We declare a new literal by this pattern:",source:"@site/docs/cpp/language/user-defined-literal.mdx",sourceDirName:"cpp/language",slug:"/cpp/language/user-defined-literal",permalink:"/zen/cpp/language/user-defined-literal",draft:!1,editUrl:"https://github.com/vamsi3/zen/edit/master/docs/cpp/language/user-defined-literal.mdx",tags:[],version:"current",lastUpdatedAt:1658505721,formattedLastUpdatedAt:"Jul 22, 2022",frontMatter:{title:"User-defined Literals",sidebar_label:"User-defined Literals"},sidebar:"cpp",previous:{title:"Attribute specifier sequence",permalink:"/zen/cpp/language/attribute-specifier-sequence"},next:{title:"Custom definition of std::hash",permalink:"/zen/cpp/custom-std-hash"}},p={},c=[{value:"Example Code",id:"example-code",level:2}],s={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Note that a literal should start with an underscore ",(0,a.kt)("inlineCode",{parentName:"p"},"_"),". We declare a new literal by this pattern:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'[returnType] operator "" _[name]([parameters]) { [body] }\n')),(0,a.kt)("p",null,"Note that parameters can be only one of these:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"(const char *)"),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"(unsigned long long int)"),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"(long double)"),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"(char)"),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"(wchar_t)"),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"(char16_t)"),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"(char32_t)"),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"(const char *, size_t)"),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"(const wchar_t *, size_t)"),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"(const char16_t *, size_t)"),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"(const char32_t *, size_t)")),(0,a.kt)("p",null,"Literals also can used with templates."),(0,a.kt)("h2",{id:"example-code"},"Example Code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"std::vector<uint64_t> operator \"\" _v(unsigned long long int x) {\n    return vector<uint64_t> {x};\n} \n\nint main() {\n    auto v = 36_v;\n    std::cout << v.size() << ' ' << v[0] << std::endl;  // 1 36\n}\n")))}d.isMDXComponent=!0}}]);