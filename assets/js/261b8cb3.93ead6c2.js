"use strict";(self.webpackChunkzen=self.webpackChunkzen||[]).push([[4389],{9613:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>u});var r=t(9496);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),_=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=_(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=_(t),u=a,f=c["".concat(s,".").concat(u)]||c[u]||p[u]||i;return t?r.createElement(f,o(o({ref:n},d),{},{components:t})):r.createElement(f,o({ref:n},d))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var _=2;_<i;_++)o[_]=t[_];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},2362:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>_});var r=t(2081),a=(t(9496),t(9613));const i={title:"Forward List / Singly Linked List",sidebar_label:"Singly Linked List"},o=void 0,l={unversionedId:"cp/data-structures/linked-list",id:"cp/data-structures/linked-list",title:"Forward List / Singly Linked List",description:"- Sentinel node at head initially.",source:"@site/docs/cp/data-structures/linked-list.mdx",sourceDirName:"cp/data-structures",slug:"/cp/data-structures/linked-list",permalink:"/zen/cp/data-structures/linked-list",draft:!1,editUrl:"https://github.com/vamsi3/zen/edit/master/docs/cp/data-structures/linked-list.mdx",tags:[],version:"current",lastUpdatedAt:1658661893,formattedLastUpdatedAt:"Jul 24, 2022",frontMatter:{title:"Forward List / Singly Linked List",sidebar_label:"Singly Linked List"},sidebar:"cp",previous:{title:"Pairing Heap",permalink:"/zen/cp/data-structures/heap/pairing-heap"},next:{title:"RegEx",permalink:"/zen/cp/data-structures/regex"}},s={},_=[{value:"Code",id:"code",level:2}],d={toc:_};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Sentinel node at head initially."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"_tail")," variable maintained, to enable the function ",(0,a.kt)("inlineCode",{parentName:"li"},"push_back")," to be implemented. This helps to realize the ",(0,a.kt)("strong",{parentName:"li"},"Queue ADT"),". Note that the ",(0,a.kt)("strong",{parentName:"li"},"Stack ADT")," doesn't need this ",(0,a.kt)("inlineCode",{parentName:"li"},"push_back")," since ",(0,a.kt)("inlineCode",{parentName:"li"},"push_front")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"pop_front")," are sufficient for it.")),(0,a.kt)("h2",{id:"code"},"Code"),(0,a.kt)("p",null,"::: details Test Link\nTested at ",(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/design-linked-list/"},"https://leetcode.com/problems/design-linked-list/"),"\n:::"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"/**\n * INFO: Singly Linked List with Tail\n *    ->  Maintaining a `_tail` pointer helps to realize`push_back()`, thus\n *        enabling to implement Queue ADT\n *    -> One single sentinel node is used for head.\n *\n * CONSTRAINTS:\n *    ->  _tail->next == nullptr\n *    ->  _head always points to it's sentinel node.\n */\ntemplate<typename T>\nclass ForwardListWithTail {\nprivate:\n  class Node {\n  public:\n    Node* _next = nullptr;\n    T _value;\n    Node() {}\n    explicit Node(const T& __val): _value(__val) {}\n    explicit Node(T&& __val): _value(__val) {}\n  };\n\n  Node* _head = nullptr;\n  Node* _tail = nullptr;\n  size_t _size = 0;\n\npublic:\n  ForwardListWithTail() { _head = _tail = new Node; }\n  ~ForwardListWithTail() {\n    while (_head) {\n      auto next = _head->_next;\n      delete _head;\n      _head = next;\n    }\n  }\n\n  bool empty() const noexcept { return _head->_next == nullptr; }\n  size_t size() const noexcept { return _size; }\n  T& front() { return _head->_next->_value; }\n\n  Node* before_begin() noexcept { return _head; }\n  Node* begin() noexcept { return _head->_next; }\n  Node* before_end() noexcept { return _tail; }\n  Node* end() noexcept { return nullptr; }\n\n  void push_front(const T& __val) { insert_after(before_begin(), __val); }\n  void push_front(T&& __val) { push_front(std::move(__val)); }\n  void push_back(const T& __val) { insert_after(before_end(), __val); }\n  void push_back(T&& __val) { push_back(std::move(__val)); }\n  void pop_front() { erase_after(before_begin()); }\n\n  Node* insert_after(Node* __pos, const T& __val) {\n    ++_size;\n    auto new_node = new Node(__val);\n    new_node->_next = __pos->_next;\n    if (_tail == __pos) _tail = new_node;\n    return __pos->_next = new_node;\n  }\n\n  Node* insert_after(Node* __pos, T&& __val) {\n    insert_after(__pos, std::move(__val));\n  }\n\n  Node* erase_after(Node* __pos) {\n    --_size;\n    auto curr = __pos->_next;\n    __pos->_next = curr->_next;\n    if (_tail == curr) _tail = __pos;\n    delete curr;\n    return __pos->_next;\n  }\n\n  /** VERIFY: Pending verification */\n  // Node* erase_after(Node* __pos, Node* __last) {\n  //   auto __curr = __pos->_next;\n  //   while (__curr != __last) {\n  //     auto __temp = __curr;\n  //     __curr = __curr->next;\n  //     delete __temp;\n  //     --_size;\n  //   }\n  //   return __pos->_next = __last;\n  // }\n\n  Node* at(int __index) {\n    auto node = _head;\n    for (++__index; __index > 0; --__index) node = node->_next;\n    return node;\n  }\n};\n")))}p.isMDXComponent=!0}}]);