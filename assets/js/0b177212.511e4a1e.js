"use strict";(self.webpackChunkzen=self.webpackChunkzen||[]).push([[167],{3905:function(t,e,r){r.d(e,{Zo:function(){return u},kt:function(){return f}});var n=r(7294);function o(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function i(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function a(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?i(Object(r),!0).forEach((function(e){o(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function s(t,e){if(null==t)return{};var r,n,o=function(t,e){if(null==t)return{};var r,n,o={},i=Object.keys(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||(o[r]=t[r]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(o[r]=t[r])}return o}var l=n.createContext({}),c=function(t){var e=n.useContext(l),r=e;return t&&(r="function"==typeof t?t(e):a(a({},e),t)),r},u=function(t){var e=c(t.components);return n.createElement(l.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},m=n.forwardRef((function(t,e){var r=t.components,o=t.mdxType,i=t.originalType,l=t.parentName,u=s(t,["components","mdxType","originalType","parentName"]),m=c(r),f=o,d=m["".concat(l,".").concat(f)]||m[f]||p[f]||i;return r?n.createElement(d,a(a({ref:e},u),{},{components:r})):n.createElement(d,a({ref:e},u))}));function f(t,e){var r=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var i=r.length,a=new Array(i);a[0]=m;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=t,s.mdxType="string"==typeof t?t:o,a[1]=s;for(var c=2;c<i;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4339:function(t,e,r){r.r(e),r.d(e,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return m}});var n=r(7462),o=r(3366),i=(r(7294),r(3905)),a=["components"],s={title:"Sorting",sidebar_label:"Sorting"},l=void 0,c={unversionedId:"cp/algorithms/sort",id:"cp/algorithms/sort",title:"Sorting",description:"- Stable sort means that elements with equal value are not disturbed of their relative positions after sorting.",source:"@site/docs/cp/algorithms/sort.mdx",sourceDirName:"cp/algorithms",slug:"/cp/algorithms/sort",permalink:"/zen/cp/algorithms/sort",editUrl:"https://github.com/vamsi3/zen/edit/master/docs/cp/algorithms/sort.mdx",tags:[],version:"current",lastUpdatedAt:1634748217,formattedLastUpdatedAt:"10/20/2021",frontMatter:{title:"Sorting",sidebar_label:"Sorting"},sidebar:"cp",previous:{title:"std::merge",permalink:"/zen/cp/algorithms/merge"},next:{title:"Subset Transforms (DP)",permalink:"/zen/cp/algorithms/subset-transforms"}},u=[{value:"Insertion Sort",id:"insertion-sort",children:[],level:2}],p={toc:u};function m(t){var e=t.components,r=(0,o.Z)(t,a);return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("u",null,"Stable sort")," means that elements with equal value are not disturbed of their relative positions after sorting.")),(0,i.kt)("h2",{id:"insertion-sort"},"Insertion Sort"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'namespace Algorithm {\n    void insertion_sort(std::vector<int>& a) {\n        int n = a.size();\n        for (int i = 1; i < n; ++i) {\n            int x = std::move(a[i]);\n            int j = i - 1;\n            while (j >= 0 && a[j] > x) {\n                a[j + 1] = std::move(a[j]);\n                --j;\n            }\n            a[j + 1] = std::move(x);\n        }\n    }\n}\n\nint main() {\n    vector<int> v = {5, 2, 6, 1, 3, 1, 3, 2, 3, 4};\n    Algorithm::insertion_sort(v);\n    std::ranges::copy(v, std::ostream_iterator<int>(std::cout, " "));\n}\n')))}m.isMDXComponent=!0}}]);