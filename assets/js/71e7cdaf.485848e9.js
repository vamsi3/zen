"use strict";(self.webpackChunkzen=self.webpackChunkzen||[]).push([[8713],{9613:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,v=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return n?a.createElement(v,l(l({ref:t},u),{},{components:n})):a.createElement(v,l({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1978:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(9496),r=n(5924);const i="tabItem_IPoj";function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,l),hidden:n},t)}},2356:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(4250),r=n(9496),i=n(5924),l=n(9298),o=n(1461),s=n(3903),c=n(4539);const u="tabList_xr86",p="tabItem_r4_W";function d(e){var t;const{lazy:n,block:l,defaultValue:d,values:m,groupId:v,className:h}=e,g=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=m??g.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),b=(0,o.l)(f,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const k=null===d?d:d??(null==(t=g.find((e=>e.props.default)))?void 0:t.props.value)??g[0].props.value;if(null!==k&&!f.some((e=>e.value===k)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${k}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:j}=(0,s.U)(),[w,O]=(0,r.useState)(k),E=[],{blockElementScrollPositionUntilNextRender:N}=(0,c.o5)();if(null!=v){const e=y[v];null!=e&&e!==w&&f.some((t=>t.value===e))&&O(e)}const _=e=>{const t=e.currentTarget,n=E.indexOf(t),a=f[n].value;a!==w&&(N(t),O(a),null!=v&&j(v,String(a)))},x=e=>{var t;let n=null;switch(e.key){case"Enter":_(e);break;case"ArrowRight":{const t=E.indexOf(e.currentTarget)+1;n=E[t]??E[0];break}case"ArrowLeft":{const t=E.indexOf(e.currentTarget)-1;n=E[t]??E[E.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":l},h)},f.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:e=>E.push(e),onKeyDown:x,onClick:_},l,{className:(0,i.Z)("tabs__item",p,null==l?void 0:l.className,{"tabs__item--active":w===t})}),n??t)}))),n?(0,r.cloneElement)(g.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==w})))))}function m(e){const t=(0,l.Z)();return r.createElement(d,(0,a.Z)({key:String(t)},e))}},687:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var a=n(4250),r=(n(9496),n(9613)),i=n(2356),l=n(1978);const o={title:"Dijkstra's Algorithm",sidebar_label:"Dijkstra's Algorithm"},s=void 0,c={unversionedId:"cp/graph/dijkstra",id:"cp/graph/dijkstra",title:"Dijkstra's Algorithm",description:"- Graph::WeightedEdge \u279d /cp/graph/graph-class",source:"@site/docs/cp/graph/dijkstra.mdx",sourceDirName:"cp/graph",slug:"/cp/graph/dijkstra",permalink:"/zen/cp/graph/dijkstra",draft:!1,editUrl:"https://github.com/vamsi3/zen/edit/master/docs/cp/graph/dijkstra.mdx",tags:[],version:"current",lastUpdatedAt:1667746530,formattedLastUpdatedAt:"Nov 6, 2022",frontMatter:{title:"Dijkstra's Algorithm",sidebar_label:"Dijkstra's Algorithm"},sidebar:"cp",previous:{title:"Centroid Decomposition",permalink:"/zen/cp/graph/centroid-decomposition"},next:{title:"Dual Graphs of Planar Graphs",permalink:"/zen/cp/graph/dual-graphs"}},u={},p=[{value:"Code",id:"code",level:2}],d={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{title:"INCLUDE",type:"note"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Graph::Graph"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Graph::WeightedEdge")," \u279d ",(0,r.kt)("a",{parentName:"li",href:"/cp/graph/graph-class"},"/cp/graph/graph-class")))),(0,r.kt)("h2",{id:"code"},"Code"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"Code",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Graph::dijkstra"',title:'"Graph::dijkstra"'},"namespace Graph {\n    std::vector<int32_t> dijkstra(Graph<WeightedEdge> graph, int32_t source) {\n        std::vector<int32_t> distance(graph.adj.size(), INT_MAX);\n        distance[source] = 0;\n\n        auto cmp_distance = [&distance = std::as_const(distance)](auto const& u, auto const& v) {\n            return distance[u] < distance[v];\n        };\n        std::set<int32_t, decltype(cmp_distance)> leaves({source}, cmp_distance);\n\n        while (!leaves.empty()) {\n            auto u = *leaves.begin();\n            leaves.erase(leaves.begin());\n            \n            for (auto const& ed_idx : graph.adj[u]) {\n                auto const& edge = graph.ed[ed_idx];\n                auto v = edge.other(u);\n                int32_t new_distance = distance[u] + edge.w;\n                if (distance[v] <= new_distance) continue;\n                \n                distance[v] = new_distance;\n                auto node_v = leaves.extract(v);\n                if (node_v) {\n                    leaves.insert(std::move(node_v));\n                } else {\n                    leaves.insert(v);\n                }\n            }\n        }\n\n        return distance;\n    }\n}\n"))),(0,r.kt)(l.Z,{value:"Verify",mdxType:"TabItem"},(0,r.kt)("div",{class:"verify-tab"},(0,r.kt)("div",{class:"verify"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Verification"',title:'"Verification"'},"int main() {\n    int n, m; cin >> n >> m;\n    Graph::Graph<Graph::WeightedEdge> g(n);\n    for (auto _ [[maybe_unused]] : std::views::iota(0, m)) {\n        int u, v, w;\n        std::cin >> u >> v >> w;\n        g.addEdge({--u ,--v, w});\n    }\n    auto d = Graph::dijkstra(g, 0);\n    for (auto& x : d) std::cout << x << ' ';\n    std::cout << std::endl;\n}\n"))),(0,r.kt)("div",{class:"input"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Input"',title:'"Input"'},"6 9\n1 2 7\n1 3 9\n1 6 14\n2 3 10\n2 4 15\n3 4 11\n3 6 2\n4 5 6\n5 6 9\n"))),(0,r.kt)("div",{class:"output"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Output"',title:'"Output"'},"0 7 9 20 20 11\n")))))))}m.isMDXComponent=!0}}]);