"use strict";(self.webpackChunkzen=self.webpackChunkzen||[]).push([[6783],{7942:(n,e,t)=>{t.d(e,{Zo:()=>d,kt:()=>f});var r=t(959);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function c(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function a(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},i=Object.keys(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var p=r.createContext({}),s=function(n){var e=r.useContext(p),t=e;return n&&(t="function"==typeof n?n(e):c(c({},e),n)),t},d=function(n){var e=s(n.components);return r.createElement(p.Provider,{value:e},n.children)},u="mdxType",l={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(n,e){var t=n.components,o=n.mdxType,i=n.originalType,p=n.parentName,d=a(n,["components","mdxType","originalType","parentName"]),u=s(t),m=o,f=u["".concat(p,".").concat(m)]||u[m]||l[m]||i;return t?r.createElement(f,c(c({ref:e},d),{},{components:t})):r.createElement(f,c({ref:e},d))}));function f(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var i=t.length,c=new Array(i);c[0]=m;var a={};for(var p in e)hasOwnProperty.call(e,p)&&(a[p]=e[p]);a.originalType=n,a[u]="string"==typeof n?n:o,c[1]=a;for(var s=2;s<i;s++)c[s]=t[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5334:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>p,contentTitle:()=>c,default:()=>l,frontMatter:()=>i,metadata:()=>a,toc:()=>s});var r=t(1163),o=(t(959),t(7942));const i={title:"Centroid Decomposition",sidebar_label:"Centroid Decomposition"},c=void 0,a={unversionedId:"cp/graph/centroid-decomposition",id:"cp/graph/centroid-decomposition",title:"Centroid Decomposition",description:"Code",source:"@site/docs/cp/graph/centroid-decomposition.mdx",sourceDirName:"cp/graph",slug:"/cp/graph/centroid-decomposition",permalink:"/zen/cp/graph/centroid-decomposition",draft:!1,editUrl:"https://github.com/vamsi3/zen/edit/master/docs/cp/graph/centroid-decomposition.mdx",tags:[],version:"current",lastUpdatedAt:1677637965,formattedLastUpdatedAt:"Mar 1, 2023",frontMatter:{title:"Centroid Decomposition",sidebar_label:"Centroid Decomposition"},sidebar:"cp",previous:{title:"Bridges + Articulation Points",permalink:"/zen/cp/graph/bridges-articulation-points"},next:{title:"Dijkstra's Algorithm",permalink:"/zen/cp/graph/dijkstra"}},p={},s=[{value:"Code",id:"code",level:2}],d={toc:s},u="wrapper";function l(n){let{components:e,...t}=n;return(0,o.kt)(u,(0,r.Z)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"code"},"Code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 5'000'005;\nset<pair<int, int>> g[N];\nint sz[N], pa[N];\n\nint dfs1(int u, int p = -1) {\n    sz[u] = 1;\n    for (auto &[v, _]: g[u]) {\n        if (v == p) continue;\n        sz[u] += dfs1(v, u);\n    }\n    return sz[u];\n}\n\nvoid dfs2(int u, int p, int c) {\n    // do something\n    for (auto &[v, ca]: g[u]) {\n        if (v == p) continue;\n        // do something\n        dfs2(v, u, c);\n        // do something\n    }\n    // do something\n}\n\nint centroid(int u, int p, int n) {\n    for (auto &[v, c]: g[u]) {\n        if (v == p) continue;\n        if (sz[v] > n / 2) return centroid(v, u, n);\n    }\n    return u;\n}\n\nvoid centroid_decomposition(int u, int p = -1) {\n    int n = dfs1(u, p);\n    int c = centroid(u, p, n);\n    if (p == -1) p = c;\n    pa[c] = p;\n\n    dfs2(c, p, c);\n    \n    vector<pair<int, int>> ch(g[c].begin(), g[c].end());\n    for (auto &[v, ca]: ch) {\n        g[c].erase({v, ca}); g[v].erase({c, ca});\n        centroid_decomposition(v, c);\n    }\n}\n\ninline void solve() {\n    int n; cin >> n;\n    for (int i = 1; i < n; ++i) {\n        int a, b, c; cin >> a >> b >> c;\n        g[a].emplace(b, c); g[b].emplace(a, c);\n    }\n    centroid_decomposition(1);\n}\n")))}l.isMDXComponent=!0}}]);