"use strict";(self.webpackChunkzen=self.webpackChunkzen||[]).push([[8074],{9613:(n,e,t)=>{t.d(e,{Zo:()=>s,kt:()=>m});var i=t(9496);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,i)}return t}function c(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function a(n,e){if(null==n)return{};var t,i,r=function(n,e){if(null==n)return{};var t,i,r={},o=Object.keys(n);for(i=0;i<o.length;i++)t=o[i],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(i=0;i<o.length;i++)t=o[i],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var l=i.createContext({}),p=function(n){var e=i.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):c(c({},e),n)),t},s=function(n){var e=p(n.components);return i.createElement(l.Provider,{value:e},n.children)},y={inlineCode:"code",wrapper:function(n){var e=n.children;return i.createElement(i.Fragment,{},e)}},u=i.forwardRef((function(n,e){var t=n.components,r=n.mdxType,o=n.originalType,l=n.parentName,s=a(n,["components","mdxType","originalType","parentName"]),u=p(t),m=r,f=u["".concat(l,".").concat(m)]||u[m]||y[m]||o;return t?i.createElement(f,c(c({ref:e},s),{},{components:t})):i.createElement(f,c({ref:e},s))}));function m(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var o=t.length,c=new Array(o);c[0]=u;var a={};for(var l in e)hasOwnProperty.call(e,l)&&(a[l]=e[l]);a.originalType=n,a.mdxType="string"==typeof n?n:r,c[1]=a;for(var p=2;p<o;p++)c[p]=t[p];return i.createElement.apply(null,c)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9299:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>c,default:()=>y,frontMatter:()=>o,metadata:()=>a,toc:()=>p});var i=t(2081),r=(t(9496),t(9613));const o={title:"Polynomial Arithmetic"},c=void 0,a={unversionedId:"cp/math/polynomial",id:"cp/math/polynomial",title:"Polynomial Arithmetic",description:"- NTT::conv1D \u279d /cp/math/ntt",source:"@site/docs/cp/math/polynomial.mdx",sourceDirName:"cp/math",slug:"/cp/math/polynomial",permalink:"/zen/cp/math/polynomial",draft:!1,editUrl:"https://github.com/vamsi3/zen/edit/master/docs/cp/math/polynomial.mdx",tags:[],version:"current",lastUpdatedAt:1658661893,formattedLastUpdatedAt:"Jul 24, 2022",frontMatter:{title:"Polynomial Arithmetic"},sidebar:"cp",previous:{title:"Number Theory",permalink:"/zen/cp/math/number-theory"},next:{title:"Primality Tests",permalink:"/zen/cp/math/primality-test"}},l={},p=[{value:"Old Code",id:"old-code",level:2},{value:"New Code",id:"new-code",level:2}],s={toc:p};function y(n){let{components:e,...t}=n;return(0,r.kt)("wrapper",(0,i.Z)({},s,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{title:"INCLUDE",type:"note"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NTT::conv1D")," \u279d ",(0,r.kt)("a",{parentName:"li",href:"/cp/math/ntt"},"/cp/math/ntt")))),(0,r.kt)("h2",{id:"old-code"},"Old Code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#pragma once\n#include \"../template/template.cpp\"\n#include \"../numeric/NTT.cpp\"\n\nnamespace Poly {\n\n  class Poly {\n  public:\n    vector<Mint> c;\n\n    void sanitize() {\n      while (!c.empty() && c.back() == 0) c.pop_back();\n    }\n\n    Poly operator+=(const Poly &x) {\n      c.resize(max(c.size(), x.c.size()));\n      for (size_t i = 0; i < c.size(); ++i) c[i] += x.c[i];\n      sanitize();\n      return *this;\n    }\n    Poly operator-=(const Poly &x) {\n      c.resize(max(c.size(), x.c.size()));\n      for (size_t i = 0; i < c.size(); ++i) c[i] -= x.c[i];\n      sanitize();\n      return *this;\n    }\n    Poly operator*=(const Poly &x) { NTT::conv1D(c, x.c); sanitize(); return *this; }\n    Poly operator-() const { auto p = *this; for (auto &x : p.c) x = -x; return p; }\n\n    friend Poly operator+(const Poly &x, const Poly &y) { Poly p = x; return p += y; }\n    friend Poly operator-(const Poly &x, const Poly &y) { Poly p = x; return p -= y; }\n    friend Poly operator*(const Poly &x, const Poly &y) { Poly p = x; return p *= y; }\n\n    friend ostream& operator<<(ostream& stream, const Poly& x)\n      { stream << \"Poly[ \"; for (auto &c : x.c) stream << c << ' '; return stream << ']'; }\n\n    Mint& operator[](int32_t idx) { return c[idx];  }\n\n    void derivative() {\n      if (c.empty()) return;\n      for (int32_t i = 0; i < c.size() - 1; ++i) {\n          c[i] = c[i + 1] * (i + 1);\n      }\n      c.resize(c.size() - 1);\n    }\n\n    void integral() {\n      if (c.empty()) return;\n      c.resize(c.size() + 1);\n      for (int32_t i = c.size() - 1; i > 0; --i) {\n        c[i] = c[i - 1] * Mint(i).inv();\n      }\n      c[0] = 0;\n    }\n\n    Poly exp() {\n      Poly f, g; f.c = g.c = {1};\n      for (int32_t m = 1; m < c.size(); m *= 2) {\n        auto g_t1 = f * g; g_t1.c.resize(m);\n        g_t1 = -g_t1; g_t1[0] += 2;\n        g *= g_t1; g.c.resize(m);\n\n        auto q = *this; q.c.resize(m); q.derivative();\n\n        auto w = f * q; w.c.resize(2 * m - 1);\n        auto w_t1 = f; w_t1.derivative();\n        for (int32_t i = 0; i < 2 * m - 1; ++i) {\n            if (i < m - 1) w[i] = w_t1[i] - w[i];\n            else w[i] = -w[i];\n        }\n        w *= g; w.c.resize(2 * m - 1);\n        for (int32_t i = 0; i < m - 1; ++i) w[i] += q[i];\n\n        w.integral();\n        for (int32_t i = 0; i < 2 * m; ++i) {\n            if (i < c.size()) w[i] = c[i] - w[i];\n            else w[i] = -w[i];\n        }\n        w[0] += 1;\n        f *= w; f.c.resize(2 * m);\n      }\n      f.sanitize();\n      return f;\n    }\n  };\n\n}\n\n#define MAIN\n#ifdef MAIN\n\nconst int N = 150000 + 5;\nint n, q;\nint c[N];\ninline void incrCoeff(ll p) { if (p <= n) ++c[p]; }\ninline void decrCoeff(ll p) { if (p <= n) --c[p]; }\n\nint main() {\n  // Poly::Poly<T> p; p.c = {1, 4};\n  // Poly::Poly<T> q; q.c = {2, 3};\n  // p *= q;\n  // p = p.exp();\n  // cout << p << '\\n';\n\n    cin >> n >> q;\n    for (int i = 0; i < q; ++i) {\n        ll a, b; cin >> a >> b;\n        incrCoeff(a * (b + 1)); decrCoeff(a);\n    }\n    Poly::Poly p; p.c.resize(n + 1, 0);\n    for (int i = 1; i <= n; ++i) {\n        for (int j = 1, k = i; k <= n; ++j, k += i) {\n            p[k] -= c[i] / Mint(j);\n        }\n    }\n    p = p.exp();\n    for (int i = 1; i <= n; ++i) {\n        cout << p[i] << ' ';\n    }\n    cout << '\\n';\n}\n\n#endif\n")),(0,r.kt)("h2",{id:"new-code"},"New Code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"namespace Math {\n    template<typename Mint> class Poly {\n    private:\n        inline void sanitize() { while (!c.empty() && c.back() == 0) c.pop_back(); }\n\n    public:\n        std::vector<Mint> c;\n\n        constexpr Poly() = default;\n        constexpr ~Poly() = default;\n        constexpr Poly(Poly const&) = default;\n        constexpr Poly(Poly&&) = default;\n        constexpr Poly(std::initializer_list<Mint> l) : c(l) {}\n        Poly& operator=(Poly const&) & = default;\n        Poly& operator=(Poly&&) & = default;\n\n        Mint& operator[](int32_t idx) { return c[idx]; }\n        Poly operator-() const { auto p = *this; for (auto& x : p.c) x = -x; return p; }\n\n        Poly& operator+=(Poly const& x) {\n            if (c.size() < x.c.size()) c.resize(x.c.size());\n            for (size_t i = 0; i < x.c.size(); ++i) c[i] += x.c[i];\n            sanitize(); return *this;\n        }\n        Poly& operator-=(Poly const& x) {\n            if (c.size() < x.c.size()) c.resize(x.c.size());\n            for (size_t i = 0; i < x.c.size(); ++i) c[i] -= x.c[i];\n            sanitize(); return *this;\n        }\n\n        Poly operator*=(Poly const& x) { NTT<Mint>::conv1D(c, x.c); return *this; }\n        Poly operator*=(Mint k)        { for (auto& x : c) x *= k; return *this; }\n\n        friend Poly operator+(Poly x, Poly const& y) { return x += y; }\n        friend Poly operator-(Poly x, Poly const& y) { return x -= y; }\n        friend Poly operator*(Poly x, Poly const& y) { return x *= y; }\n        friend Poly operator*(Poly x, Mint k)        { return x *= k; }\n        friend Poly operator*(Mint k, Poly x)        { return x *= k; }\n\n        friend ostream& operator<<(ostream& os, const Poly& x) { os << \"Polynomial[ \"; for (auto const& c : x.c) os << c << ' '; return os << ']'; }\n\n        void derivative() {\n            if (c.empty()) return;\n            auto n = static_cast<int32_t>(c.size());\n            for (auto i = 1; i < n; ++i) c[i - 1] = c[i] * i;\n            c.resize(n - 1);\n        }\n\n        void integral() {\n            if (c.empty()) return;\n            auto n = static_cast<int32_t>(c.size());\n            c.resize(n + 1);\n            for (auto i = n; i > 0; --i) c[i] = c[i - 1] * Mint(i).inv();\n            c[0] = 0;\n        }\n    };\n}\n")))}y.isMDXComponent=!0}}]);