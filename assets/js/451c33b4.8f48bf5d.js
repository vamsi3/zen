"use strict";(self.webpackChunkzen=self.webpackChunkzen||[]).push([[86],{3905:function(t,n,e){e.d(n,{Zo:function(){return f},kt:function(){return u}});var r=e(7294);function a(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function o(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function s(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?o(Object(e),!0).forEach((function(n){a(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):o(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function i(t,n){if(null==t)return{};var e,r,a=function(t,n){if(null==t)return{};var e,r,a={},o=Object.keys(t);for(r=0;r<o.length;r++)e=o[r],n.indexOf(e)>=0||(a[e]=t[e]);return a}(t,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)e=o[r],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(a[e]=t[e])}return a}var c=r.createContext({}),m=function(t){var n=r.useContext(c),e=n;return t&&(e="function"==typeof t?t(n):s(s({},n),t)),e},f=function(t){var n=m(t.components);return r.createElement(c.Provider,{value:n},t.children)},p={inlineCode:"code",wrapper:function(t){var n=t.children;return r.createElement(r.Fragment,{},n)}},l=r.forwardRef((function(t,n){var e=t.components,a=t.mdxType,o=t.originalType,c=t.parentName,f=i(t,["components","mdxType","originalType","parentName"]),l=m(e),u=a,d=l["".concat(c,".").concat(u)]||l[u]||p[u]||o;return e?r.createElement(d,s(s({ref:n},f),{},{components:e})):r.createElement(d,s({ref:n},f))}));function u(t,n){var e=arguments,a=n&&n.mdxType;if("string"==typeof t||a){var o=e.length,s=new Array(o);s[0]=l;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=t,i.mdxType="string"==typeof t?t:a,s[1]=i;for(var m=2;m<o;m++)s[m]=e[m];return r.createElement.apply(null,s)}return r.createElement.apply(null,e)}l.displayName="MDXCreateElement"},4259:function(t,n,e){e.r(n),e.d(n,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return m},toc:function(){return f},default:function(){return l}});var r=e(7462),a=e(3366),o=(e(7294),e(3905)),s=["components"],i={title:"Subset Transforms (Dynamic Programming)",sidebar_label:"Subset Transforms (DP)"},c=void 0,m={unversionedId:"cp/algorithms/subset-transforms",id:"cp/algorithms/subset-transforms",isDocsHomePage:!1,title:"Subset Transforms (Dynamic Programming)",description:"1. https://codeforces.com/blog/entry/45223",source:"@site/docs/cp/algorithms/subset-transforms.mdx",sourceDirName:"cp/algorithms",slug:"/cp/algorithms/subset-transforms",permalink:"/zen/cp/algorithms/subset-transforms",editUrl:"https://github.com/vamsi3/zen/edit/master/docs/cp/algorithms/subset-transforms.mdx",tags:[],version:"current",lastUpdatedAt:1635009487,formattedLastUpdatedAt:"10/23/2021",frontMatter:{title:"Subset Transforms (Dynamic Programming)",sidebar_label:"Subset Transforms (DP)"},sidebar:"cp",previous:{title:"Sorting",permalink:"/zen/cp/algorithms/sort"},next:{title:"DSU / Union-Find",permalink:"/zen/cp/data-structures/dsu"}},f=[{value:"Code",id:"code",children:[],level:2}],p={toc:f};function l(t){var n=t.components,e=(0,a.Z)(t,s);return(0,o.kt)("wrapper",(0,r.Z)({},p,e,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"references")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("ol",{parentName:"div"},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"https://codeforces.com/blog/entry/45223"},"https://codeforces.com/blog/entry/45223")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"https://codeforces.com/blog/entry/72488"},"https://codeforces.com/blog/entry/72488"))))),(0,o.kt)("h2",{id:"code"},"Code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'namespace Algorithm {\n    template<typename T>\n    void zetaTransform(std::span<T> f) {\n        int n = std::countr_zero(f.size());\n        for (int i = 0; i < n; ++i)\n            for (int mask = 0; mask < (1 << n); ++mask)\n                if (mask & (1 << i))\n                    f[mask] += f[mask ^ (1 << i)];\n    }\n\n    /* this is inverse of zetaTransform */\n    template<typename T>\n    void mobiusTransform(std::span<T> f) {\n        int n = std::countr_zero(f.size());\n        for (int i = 0; i < n; ++i)\n            for (int mask = 0; mask < (1 << n); ++mask)\n                if (mask & (1 << i))\n                    f[mask] -= f[mask ^ (1 << i)];\n    }\n\n    /* unverified */\n    template<typename T>\n    std::vector<T> subsetSumConvolution(std::span<T> f, std::span<T> g) {\n        uint64_t two_power_n = f.size();\n        int n = std::countr_zero(two_power_n);\n\n        std::array<std::vector<T>, 32> f_hat, g_hat, h_hat;\n        std::ranges::fill(f_hat, std::vector<int>(two_power_n, 0));\n        std::ranges::fill(g_hat, std::vector<int>(two_power_n, 0));\n        std::ranges::fill(h_hat, std::vector<int>(two_power_n, 0));\n\n        for (int mask = 0; mask < (1 << n); ++mask) {\n            int set_bit_count = std::popcount((uint64_t) mask);\n            f_hat[set_bit_count][mask] = f[mask];\n            g_hat[set_bit_count][mask] = g[mask];\n        }\n\n        for (int k = 0; k <= n; ++k) zetaTransform<T>(f_hat[k]);\n        for (int k = 0; k <= n; ++k) zetaTransform<T>(g_hat[k]);\n\n        for (int i = 0; i <= n; ++i)\n            for (int j = 0; j <= i; ++j)\n                for (int mask = 0; mask < (1 << n); ++mask)\n                    h_hat[i][mask] += f_hat[j][mask] * g_hat[i - j][mask];\n\n        for (int k = 0; k <= n; ++k) mobiusTransform<T>(h_hat[k]);\n        \n        std::vector<T> fog(two_power_n);\n\n        for (int mask = 0; mask < (1 << n); ++mask)\n            fog[mask] = h_hat[mask][std::popcount((uint64_t) mask)];\n        \n        return fog;\n    }\n}\n\nint main() {\n    std::vector<int> a = {3,7,5,6,1,2,2,1};\n    Algorithm::zetaTransform<int>(a);\n    std::ranges::copy(a, std::ostream_iterator<int>(std::cout, " "));\n}\n')))}l.isMDXComponent=!0}}]);