"use strict";(self.webpackChunkzen=self.webpackChunkzen||[]).push([[9454],{3905:function(e,n,r){r.d(n,{Zo:function(){return l},kt:function(){return f}});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=t.createContext({}),p=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},l=function(e){var n=p(e.components);return t.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=p(r),f=o,d=m["".concat(s,".").concat(f)]||m[f]||u[f]||i;return r?t.createElement(d,a(a({ref:n},l),{},{components:r})):t.createElement(d,a({ref:n},l))}));function f(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=m;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var p=2;p<i;p++)a[p]=r[p];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8270:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return l},default:function(){return m}});var t=r(7462),o=r(3366),i=(r(7294),r(3905)),a=["components"],c={title:"Coordinate Compression",sidebar_label:"Coordinate Compression"},s=void 0,p={unversionedId:"cp/algorithms/coordinate-compression",id:"cp/algorithms/coordinate-compression",isDocsHomePage:!1,title:"Coordinate Compression",description:"More Efficient Form",source:"@site/docs/cp/algorithms/coordinate-compression.mdx",sourceDirName:"cp/algorithms",slug:"/cp/algorithms/coordinate-compression",permalink:"/zen/cp/algorithms/coordinate-compression",editUrl:"https://github.com/vamsi3/zen/edit/master/docs/cp/algorithms/coordinate-compression.mdx",tags:[],version:"current",lastUpdatedAt:1634748217,formattedLastUpdatedAt:"10/20/2021",frontMatter:{title:"Coordinate Compression",sidebar_label:"Coordinate Compression"},sidebar:"cp",previous:{title:"Binary Search",permalink:"/zen/cp/algorithms/binary-search"},next:{title:"Cycle Detection",permalink:"/zen/cp/algorithms/cycle-detection"}},l=[{value:"More Efficient Form",id:"more-efficient-form",children:[],level:2}],u={toc:l};function m(e){var n=e.components,r=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,t.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"namespace Compressor {\n  class Compressor {\n    vector<int> v;\n  public:\n    void add(int x) { v.push_back(x); }\n    void finalize() { sort(v.begin(), v.end()); v.resize(unique(v.begin(), v.end()) - v.begin()); }\n    int get(int x) { return lower_bound(v.begin(), v.end(), x) - v.begin(); }\n  };\n}\n\nCompressor::Compressor c;\n\nvoid solve() {\n  int n; cin >> n; int a[n];\n  for (int i = 0; i < n; ++i) { cin >> a[i]; c.add(a[i]); }\n  c.finalize();\n  for (int i = 0; i < n; ++i) { cout << c.get(a[i]) << ' '; }\n}\n")),(0,i.kt)("h2",{id:"more-efficient-form"},"More Efficient Form"),(0,i.kt)("p",null,"Compression when elements are referenced by index"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"// PSEUDO-CODE\nnamespace Compressor {\n  class Compressor {\n    int n = 0;\n    pair<int, int> v[N];\n    int en[N];\n  public:\n    void add(int x) { v[n] = {x, n}; ++n; }\n    void finalize() {\n      sort(v, v + n);\n      int en[0] = 0;\n      for (int i = 1; i < n; ++i) {\n        if (v[i].first == v[i - 1].first) {\n          en[i] = en[i - 1];\n        }\n        else {\n          en[i] = en[i - 1] + 1;\n        }\n      }\n    }\n    int get(int x) { return en[x]; }\n  };\n}\n")))}m.isMDXComponent=!0}}]);