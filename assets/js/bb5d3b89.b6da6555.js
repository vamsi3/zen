"use strict";(self.webpackChunkzen=self.webpackChunkzen||[]).push([[1517],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return d}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},c=Object.keys(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,c=e.originalType,l=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),m=p(r),d=o,f=m["".concat(l,".").concat(d)]||m[d]||s[d]||c;return r?n.createElement(f,i(i({ref:t},u),{},{components:r})):n.createElement(f,i({ref:t},u))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=r.length,i=new Array(c);i[0]=m;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var p=2;p<c;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9890:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return a},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return u},default:function(){return m}});var n=r(7462),o=r(3366),c=(r(7294),r(3905)),i=["components"],a={title:"std::merge",sidebar_label:"std::merge"},l=void 0,p={unversionedId:"cp/algorithms/merge",id:"cp/algorithms/merge",isDocsHomePage:!1,title:"std::merge",description:"Code",source:"@site/docs/cp/algorithms/merge.mdx",sourceDirName:"cp/algorithms",slug:"/cp/algorithms/merge",permalink:"/zen/cp/algorithms/merge",editUrl:"https://github.com/vamsi3/zen/edit/master/docs/cp/algorithms/merge.mdx",tags:[],version:"current",lastUpdatedAt:1634748217,formattedLastUpdatedAt:"10/20/2021",frontMatter:{title:"std::merge",sidebar_label:"std::merge"},sidebar:"cp",previous:{title:"Cycle Detection",permalink:"/zen/cp/algorithms/cycle-detection"},next:{title:"Sorting",permalink:"/zen/cp/algorithms/sort"}},u=[{value:"Code",id:"code",children:[],level:2}],s={toc:u};function m(e){var t=e.components,r=(0,o.Z)(e,i);return(0,c.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("h2",{id:"code"},"Code"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"namespace STL {\n    vector<int> merge(vector<int> a, vector<int> b) {\n        vector<int> c(a.size() + b.size());\n        auto x = a.begin(), y = b.begin(), z = c.begin();\n        while (z != c.end()) {\n            if (x == a.end()) { *z++ = *y++; continue; }\n            if (y == b.end()) { *z++ = *x++; continue; }\n            *z++ = (*x > *y) ? *y++ : *x++;\n        }\n        return c;\n    }\n}\n\n")))}m.isMDXComponent=!0}}]);