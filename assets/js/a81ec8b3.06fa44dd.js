"use strict";(self.webpackChunkzen=self.webpackChunkzen||[]).push([[5502],{7942:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(959);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},d="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(t),p=o,m=d["".concat(s,".").concat(p)]||d[p]||f[p]||a;return t?r.createElement(m,i(i({ref:n},c),{},{components:t})):r.createElement(m,i({ref:n},c))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},6407:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>f,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var r=t(8957),o=(t(959),t(7942));const a={title:"Suffix Automaton",sidebar_label:"Suffix Automaton"},i=void 0,l={unversionedId:"cp/string/suffix-automaton",id:"cp/string/suffix-automaton",title:"Suffix Automaton",description:"1. https://cp-algorithms.com/string/suffix-automaton.html",source:"@site/docs/cp/string/suffix-automaton.mdx",sourceDirName:"cp/string",slug:"/cp/string/suffix-automaton",permalink:"/zen/cp/string/suffix-automaton",draft:!1,editUrl:"https://github.com/vamsi3/zen/edit/master/docs/cp/string/suffix-automaton.mdx",tags:[],version:"current",lastUpdatedAt:1694358037,formattedLastUpdatedAt:"Sep 10, 2023",frontMatter:{title:"Suffix Automaton",sidebar_label:"Suffix Automaton"},sidebar:"cp",previous:{title:"Suffix Array",permalink:"/zen/cp/string/suffix-array"},next:{title:"Z-function",permalink:"/zen/cp/string/z-function"}},s={},u=[{value:"Code (Algorithm - Blumer <em>et al.</em>)",id:"code-algorithm---blumer-et-al",level:2},{value:"C++",id:"c",level:3},{value:"Kotlin",id:"kotlin",level:3}],c={toc:u},d="wrapper";function f(e){let{components:n,...t}=e;return(0,o.kt)(d,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{title:"RESOURCES",type:"note"},(0,o.kt)("ol",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"https://cp-algorithms.com/string/suffix-automaton.html"},"https://cp-algorithms.com/string/suffix-automaton.html")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"https://codeforces.com/blog/entry/20861?locale=en"},"https://codeforces.com/blog/entry/20861")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Suffix_automaton"},"https://en.wikipedia.org/wiki/Suffix_automaton")))),(0,o.kt)("h2",{id:"code-algorithm---blumer-et-al"},"Code (Algorithm - Blumer ",(0,o.kt)("em",{parentName:"h2"},"et al."),")"),(0,o.kt)("h3",{id:"c"},"C++"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="C++ | String::SuffixAutomaton"',title:'"C++',"|":!0,'String::SuffixAutomaton"':!0},"namespace String {\n    class SuffixAutomaton {\n    public:\n        int last;                                           // node index conrresponding to 'whole string' seen until now\n        std::vector<int> len;                               // length of longest string of node\n        std::vector<int> link;                              // suffix link of node\n        std::vector<std::unordered_map<char, int>> t;       // transitions of node\n\n        SuffixAutomaton() {\n            last = 0; len.resize(1, 0); link.resize(1, -1); t.resize(1);\n        }\n\n        SuffixAutomaton(std::string s) : SuffixAutomaton() {\n            std::for_each(s.cbegin(), s.cend(), std::bind(&SuffixAutomaton::add_char, this, std::placeholders::_1));\n        }\n\n        void add_char(const char& c) {\n            int p = last, q;\n            last = len.size(); len.emplace_back(len[p] + 1); link.emplace_back(0); t.emplace_back();\n\n            while (1) {\n                auto& ed = t[p]; auto it = ed.find(c); if (it != ed.end()) { q = it->second; break; }\n                ed[c] = last; p = link[p]; if (p == -1) return;\n            }\n\n            if (len[q] == len[p] + 1) { link[last] = q; return; }\n\n            int qq = len.size(); len.emplace_back(len[p] + 1); link.emplace_back(link[q]); t.emplace_back(t[q]);\n            link[q] = link[last] = qq;\n            \n            while (1) {\n                auto& r = t[p][c]; if (r != q) return; r = qq;\n                p = link[p]; if (p == -1) return;\n            }\n        }\n    };\n}\n")),(0,o.kt)("h3",{id:"kotlin"},"Kotlin"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Kotlin | SuffixAutomaton"',title:'"Kotlin',"|":!0,'SuffixAutomaton"':!0},"class SuffixAutomaton(string: String) {\n    class SuffixAutomatonNode(\n        var longestLength: Int, var suffixLink: Int, var transition: MutableMap<Char, Int> = mutableMapOf()\n    )\n\n    var nodes = mutableListOf(SuffixAutomatonNode(1, -1))\n    var endNode = 0\n\n    init {\n        string.forEach { addCharacter(it) }\n    }\n\n    private fun addCharacter(char: Char) {\n        tailrec fun traceBack(currentNode: Int, transitionNode: Int?): Pair<Int, Int>? {\n            if (currentNode == -1) return null\n            return when (val nextNode = nodes[currentNode].transition[char]) {\n                transitionNode -> {\n                    nodes[currentNode].transition[char] = nodes.lastIndex\n                    traceBack(nodes[currentNode].suffixLink, transitionNode)\n                }\n                else -> currentNode to (nextNode ?: -1)\n            }\n        }\n\n        val previousEndNode = endNode\n        nodes.add(\n            SuffixAutomatonNode(\n                nodes[previousEndNode].longestLength + 1, 0\n            )\n        )\n        endNode = nodes.lastIndex\n        val (currentNode, nextNode) = traceBack(previousEndNode, null) ?: return\n\n        if (nodes[nextNode].longestLength == nodes[currentNode].longestLength + 1) {\n            nodes[endNode].suffixLink = nextNode\n            return\n        }\n\n        nodes.add(\n            SuffixAutomatonNode(\n                nodes[currentNode].longestLength + 1, nodes[nextNode].suffixLink, nodes[nextNode].transition\n            )\n        )\n        nodes[nextNode].suffixLink = nodes.lastIndex\n        nodes[endNode].suffixLink = nodes.lastIndex\n        traceBack(currentNode, nextNode)\n    }\n}\n")))}f.isMDXComponent=!0}}]);