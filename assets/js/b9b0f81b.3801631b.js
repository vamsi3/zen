"use strict";(self.webpackChunkzen=self.webpackChunkzen||[]).push([[7559],{3905:function(t,e,r){r.d(e,{Zo:function(){return c},kt:function(){return f}});var n=r(7294);function i(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function a(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function o(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?a(Object(r),!0).forEach((function(e){i(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function l(t,e){if(null==t)return{};var r,n,i=function(t,e){if(null==t)return{};var r,n,i={},a=Object.keys(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||(i[r]=t[r]);return i}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(i[r]=t[r])}return i}var p=n.createContext({}),u=function(t){var e=n.useContext(p),r=e;return t&&(r="function"==typeof t?t(e):o(o({},e),t)),r},c=function(t){var e=u(t.components);return n.createElement(p.Provider,{value:e},t.children)},s={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},d=n.forwardRef((function(t,e){var r=t.components,i=t.mdxType,a=t.originalType,p=t.parentName,c=l(t,["components","mdxType","originalType","parentName"]),d=u(r),f=i,m=d["".concat(p,".").concat(f)]||d[f]||s[f]||a;return r?n.createElement(m,o(o({ref:e},c),{},{components:r})):n.createElement(m,o({ref:e},c))}));function f(t,e){var r=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var a=r.length,o=new Array(a);o[0]=d;var l={};for(var p in e)hasOwnProperty.call(e,p)&&(l[p]=e[p]);l.originalType=t,l.mdxType="string"==typeof t?t:i,o[1]=l;for(var u=2;u<a;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4657:function(t,e,r){r.r(e),r.d(e,{assets:function(){return c},contentTitle:function(){return p},default:function(){return f},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return s}});var n=r(3117),i=r(102),a=(r(7294),r(3905)),o=["components"],l={title:"Treap",sidebar_label:"Treap"},p=void 0,u={unversionedId:"cp/data-structures/treap",id:"cp/data-structures/treap",title:"Treap",description:"Treap with Implicit Key",source:"@site/docs/cp/data-structures/treap.mdx",sourceDirName:"cp/data-structures",slug:"/cp/data-structures/treap",permalink:"/zen/cp/data-structures/treap",editUrl:"https://github.com/vamsi3/zen/edit/master/docs/cp/data-structures/treap.mdx",tags:[],version:"current",lastUpdatedAt:1648309952,formattedLastUpdatedAt:"3/26/2022",frontMatter:{title:"Treap",sidebar_label:"Treap"},sidebar:"cp",previous:{title:"Tournament Tree",permalink:"/zen/cp/data-structures/tournament-tree"},next:{title:"Tree",permalink:"/zen/cp/data-structures/tree"}},c={},s=[{value:"Treap with Implicit Key",id:"treap-with-implicit-key",level:2}],d={toc:s};function f(t){var e=t.components,r=(0,i.Z)(t,o);return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"namespace Treap {\n  std::mt19937 gen(std::chrono::steady_clock::now().time_since_epoch().count());\n  std::uniform_int_distribution<uint32_t> dis;\n\n  class Node {\n  public:\n    int32_t k; uint32_t p;\n    Node *l = nullptr, *r = nullptr;\n    ~Node() { delete l; delete r; }\n  };\n\n  std::tuple<Node*, Node*> split(Node* t, int32_t k) {\n    if (!t)             return {nullptr, nullptr};\n    if (k < t->k)       { auto [tl, tr] = split(t->l, k); t->l = tr; return {tl, t}; }\n    else                { auto [tl, tr] = split(t->r, k); t->r = tl; return {t, tr}; }\n  }\n\n  Node* merge(Node* tl, Node* tr) {\n    if (!tl)            return tr;\n    if (!tr)            return tl;\n    if (tl->p > tr->p)  { tl->r = merge(tl->r, tr); return tl; }\n    else                { tr->l = merge(tr->l, tl); return tr; }\n  }\n\n  void insert(Node* &t, int32_t k) {\n    uint32_t p = dis(gen);\n    if (!t)             { t = new Node {k, p}; return; }\n    if (p > t->p)       { auto [tl, tr] = split(t, k); t = new Node {k, p, tl, tr}; }\n    else                { insert(k < t->k ? t->l : t->r, k); }\n  }\n\n  void erase(Node* &t, int32_t k) {\n    if (t->k == k)      { t = merge(t->l, t->r); return; }\n    else                { erase(k < t->k ? t->l : t->r, k); }\n  }\n};\n")),(0,a.kt)("h2",{id:"treap-with-implicit-key"},"Treap with Implicit Key"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"namespace TreapImplicitKey {\n  std::mt19937 gen(std::chrono::steady_clock::now().time_since_epoch().count());\n  std::uniform_int_distribution<uint32_t> dis;\n\n  class Node {\n  public:\n    uint32_t p;\n    Node *l = nullptr, *r = nullptr;\n    ~Node() { delete l; delete r; }\n  };\n\n  std::tuple<Node*, Node*> split(Node* t, uint32_t k) {\n    if (!t) return {nullptr, nullptr};\n    // TODO:\n  }\n}\n")))}f.isMDXComponent=!0}}]);