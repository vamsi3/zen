"use strict";(self.webpackChunkzen=self.webpackChunkzen||[]).push([[239],{3905:function(n,e,t){t.d(e,{Zo:function(){return s},kt:function(){return d}});var r=t(7294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function c(n,e){if(null==n)return{};var t,r,a=function(n,e){if(null==n)return{};var t,r,a={},i=Object.keys(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var p=r.createContext({}),l=function(n){var e=r.useContext(p),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},s=function(n){var e=l(n.components);return r.createElement(p.Provider,{value:e},n.children)},u={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(n,e){var t=n.components,a=n.mdxType,i=n.originalType,p=n.parentName,s=c(n,["components","mdxType","originalType","parentName"]),m=l(t),d=a,g=m["".concat(p,".").concat(d)]||m[d]||u[d]||i;return t?r.createElement(g,o(o({ref:e},s),{},{components:t})):r.createElement(g,o({ref:e},s))}));function d(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var i=t.length,o=new Array(i);o[0]=m;var c={};for(var p in e)hasOwnProperty.call(e,p)&&(c[p]=e[p]);c.originalType=n,c.mdxType="string"==typeof n?n:a,o[1]=c;for(var l=2;l<i;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},622:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return c},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return s},default:function(){return m}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),o=["components"],c={title:"Implication Graph",sidebar_label:"Implication Graph"},p=void 0,l={unversionedId:"cp/graph/implication-graph",id:"cp/graph/implication-graph",isDocsHomePage:!1,title:"Implication Graph",description:"- Graph::SCC \u279d /cp/graph/scc",source:"@site/docs/cp/graph/implication-graph.mdx",sourceDirName:"cp/graph",slug:"/cp/graph/implication-graph",permalink:"/zen/cp/graph/implication-graph",editUrl:"https://github.com/vamsi3/zen/edit/master/docs/cp/graph/implication-graph.mdx",tags:[],version:"current",lastUpdatedAt:1631968672,formattedLastUpdatedAt:"9/18/2021",frontMatter:{title:"Implication Graph",sidebar_label:"Implication Graph"},sidebar:"cp",previous:{title:"Hungarian Algorithm",permalink:"/zen/cp/graph/hungarian"},next:{title:"Lowest Common Ancestor",permalink:"/zen/cp/graph/lca"}},s=[{value:"Code",id:"code",children:[],level:2}],u={toc:s};function m(n){var e=n.components,t=(0,a.Z)(n,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"INCLUDE")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Graph::SCC")," \u279d ",(0,i.kt)("a",{parentName:"li",href:"/cp/graph/scc"},"/cp/graph/scc"))))),(0,i.kt)("h2",{id:"code"},"Code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"namespace Graph {\n    template<int32_t N_> class ImplicationGraph {\n        static_assert(N_ > 0, \"N must be positive\");\n        static constexpr int32_t N = N_;\n\n    private:\n        Graph::SCC<N> scc;\n        int n;\n    \n    public:\n        ImplicationGraph() {}\n\n        void set(int n_) { n = n_; scc.set(2 * n + 1); }\n\n        void addClause(int u, int v) {\n            // add both since implication graph is a kind of\n            // skew-symmetric graph where x => y <=> ~y => ~x\n            scc.addEdge(u, v);\n            scc.addEdge(v ^ 1, u ^ 1);\n        }\n\n        vector<int> solve() {\n            vector<int> solution(n + 1, -1);\n            vector<vector<int>> components = scc.kosaraju();\n            for (auto& co : components) {\n                if (solution[co[0] >> 1] != -1) continue;\n                for (auto& u : co) {\n                    int x = u >> 1;\n                    if (solution[x] != -1) return {};\n                    solution[x] = u & 1;\n                }\n            }\n            return solution;\n        }\n    };\n}\n\nconstexpr int N = 1'000'005;\nGraph::ImplicationGraph<N> ig;\n\ninline void solve() {\n    int n, m; cin >> n >> m;\n    ig.set(n);\n    for (int i = 0; i < m; ++i) {\n        // input x => y\n        int x, y; bool x_negated, y_negated;\n        cin >> x >> x_negated >> y >> y_negated;\n        ig.addClause((x << 1) | x_negated, (y << 1) | y_negated);\n    }\n\n    vector<int> solution = ig.solve();\n    for (int i = 1; i <= n; ++i) {\n        cout << solution[i] << ' ';\n    }\n    cout << endl;\n}\n")))}m.isMDXComponent=!0}}]);