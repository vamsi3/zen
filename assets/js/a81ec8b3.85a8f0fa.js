"use strict";(self.webpackChunkzen=self.webpackChunkzen||[]).push([[5502],{3905:function(n,e,t){t.d(e,{Zo:function(){return u},kt:function(){return p}});var r=t(7294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var s=r.createContext({}),c=function(n){var e=r.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},u=function(n){var e=c(n.components);return r.createElement(s.Provider,{value:e},n.children)},d={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},f=r.forwardRef((function(n,e){var t=n.components,o=n.mdxType,a=n.originalType,s=n.parentName,u=l(n,["components","mdxType","originalType","parentName"]),f=c(t),p=o,m=f["".concat(s,".").concat(p)]||f[p]||d[p]||a;return t?r.createElement(m,i(i({ref:e},u),{},{components:t})):r.createElement(m,i({ref:e},u))}));function p(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var a=t.length,i=new Array(a);i[0]=f;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=n,l.mdxType="string"==typeof n?n:o,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},4523:function(n,e,t){t.r(e),t.d(e,{assets:function(){return u},contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return d}});var r=t(3117),o=t(102),a=(t(7294),t(3905)),i=["components"],l={title:"Suffix Automaton",sidebar_label:"Suffix Automaton"},s=void 0,c={unversionedId:"cp/string/suffix-automaton",id:"cp/string/suffix-automaton",title:"Suffix Automaton",description:"1. https://cp-algorithms.com/string/suffix-automaton.html",source:"@site/docs/cp/string/suffix-automaton.mdx",sourceDirName:"cp/string",slug:"/cp/string/suffix-automaton",permalink:"/zen/cp/string/suffix-automaton",editUrl:"https://github.com/vamsi3/zen/edit/master/docs/cp/string/suffix-automaton.mdx",tags:[],version:"current",lastUpdatedAt:1648309952,formattedLastUpdatedAt:"3/26/2022",frontMatter:{title:"Suffix Automaton",sidebar_label:"Suffix Automaton"},sidebar:"cp",previous:{title:"Suffix Array",permalink:"/zen/cp/string/suffix-array"},next:{title:"Z-function",permalink:"/zen/cp/string/z-function"}},u={},d=[{value:"Code (Algorithm - Blumer <em>et al.</em>)",id:"code-algorithm---blumer-et-al",level:2},{value:"C++",id:"c",level:3},{value:"Kotlin",id:"kotlin",level:3}],f={toc:d};function p(n){var e=n.components,t=(0,o.Z)(n,i);return(0,a.kt)("wrapper",(0,r.Z)({},f,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"RESOURCES")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("ol",{parentName:"div"},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"https://cp-algorithms.com/string/suffix-automaton.html"},"https://cp-algorithms.com/string/suffix-automaton.html")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"https://codeforces.com/blog/entry/20861?locale=en"},"https://codeforces.com/blog/entry/20861")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Suffix_automaton"},"https://en.wikipedia.org/wiki/Suffix_automaton"))))),(0,a.kt)("h2",{id:"code-algorithm---blumer-et-al"},"Code (Algorithm - Blumer ",(0,a.kt)("em",{parentName:"h2"},"et al."),")"),(0,a.kt)("h3",{id:"c"},"C++"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="C++ | String::SuffixAutomaton"',title:'"C++',"|":!0,'String::SuffixAutomaton"':!0},"namespace String {\n    class SuffixAutomaton {\n    public:\n        int last;                                           // node index conrresponding to 'whole string' seen until now\n        std::vector<int> len;                               // length of longest string of node\n        std::vector<int> link;                              // suffix link of node\n        std::vector<std::unordered_map<char, int>> t;       // transitions of node\n\n        SuffixAutomaton() {\n            last = 0; len.resize(1, 0); link.resize(1, -1); t.resize(1);\n        }\n\n        SuffixAutomaton(std::string s) : SuffixAutomaton() {\n            std::for_each(s.cbegin(), s.cend(), std::bind(&SuffixAutomaton::add_char, this, std::placeholders::_1));\n        }\n\n        void add_char(const char& c) {\n            int p = last, q;\n            last = len.size(); len.emplace_back(len[p] + 1); link.emplace_back(0); t.emplace_back();\n\n            while (1) {\n                auto& ed = t[p]; auto it = ed.find(c); if (it != ed.end()) { q = it->second; break; }\n                ed[c] = last; p = link[p]; if (p == -1) return;\n            }\n\n            if (len[q] == len[p] + 1) { link[last] = q; return; }\n\n            int qq = len.size(); len.emplace_back(len[p] + 1); link.emplace_back(link[q]); t.emplace_back(t[q]);\n            link[q] = link[last] = qq;\n            \n            while (1) {\n                auto& r = t[p][c]; if (r != q) return; r = qq;\n                p = link[p]; if (p == -1) return;\n            }\n        }\n    };\n}\n")),(0,a.kt)("h3",{id:"kotlin"},"Kotlin"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Kotlin | SuffixAutomaton"',title:'"Kotlin',"|":!0,'SuffixAutomaton"':!0},"class SuffixAutomaton(string: String) {\n    class SuffixAutomatonNode(\n        var longestLength: Int, var suffixLink: Int, var transition: MutableMap<Char, Int> = mutableMapOf()\n    )\n\n    var nodes = mutableListOf(SuffixAutomatonNode(1, -1))\n    var endNode = 0\n\n    init {\n        string.forEach { addCharacter(it) }\n    }\n\n    private fun addCharacter(char: Char) {\n        tailrec fun traceBack(currentNode: Int, transitionNode: Int?): Pair<Int, Int>? {\n            if (currentNode == -1) return null\n            return when (val nextNode = nodes[currentNode].transition[char]) {\n                transitionNode -> {\n                    nodes[currentNode].transition[char] = nodes.lastIndex\n                    traceBack(nodes[currentNode].suffixLink, transitionNode)\n                }\n                else -> currentNode to (nextNode ?: -1)\n            }\n        }\n\n        val previousEndNode = endNode\n        nodes.add(\n            SuffixAutomatonNode(\n                nodes[previousEndNode].longestLength + 1, 0\n            )\n        )\n        endNode = nodes.lastIndex\n        val (currentNode, nextNode) = traceBack(previousEndNode, null) ?: return\n\n        if (nodes[nextNode].longestLength == nodes[currentNode].longestLength + 1) {\n            nodes[endNode].suffixLink = nextNode\n            return\n        }\n\n        nodes.add(\n            SuffixAutomatonNode(\n                nodes[currentNode].longestLength + 1, nodes[nextNode].suffixLink, nodes[nextNode].transition\n            )\n        )\n        nodes[nextNode].suffixLink = nodes.lastIndex\n        nodes[endNode].suffixLink = nodes.lastIndex\n        traceBack(currentNode, nextNode)\n    }\n}\n")))}p.isMDXComponent=!0}}]);