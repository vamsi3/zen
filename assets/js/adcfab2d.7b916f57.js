"use strict";(self.webpackChunkzen=self.webpackChunkzen||[]).push([[3799],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),m=l(n),f=a,d=m["".concat(c,".").concat(f)]||m[f]||s[f]||o;return n?r.createElement(d,i(i({ref:t},p),{},{components:n})):r.createElement(d,i({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var u={};for(var c in t)hasOwnProperty.call(t,c)&&(u[c]=t[c]);u.originalType=e,u.mdxType="string"==typeof e?e:a,i[1]=u;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9411:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return m}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],u={title:"Tournament Tree",sidebar_label:"Tournament Tree"},c=void 0,l={unversionedId:"cp/data-structures/tournament-tree",id:"cp/data-structures/tournament-tree",title:"Tournament Tree",description:"",source:"@site/docs/cp/data-structures/tournament-tree.mdx",sourceDirName:"cp/data-structures",slug:"/cp/data-structures/tournament-tree",permalink:"/zen/cp/data-structures/tournament-tree",editUrl:"https://github.com/vamsi3/zen/edit/master/docs/cp/data-structures/tournament-tree.mdx",tags:[],version:"current",lastUpdatedAt:1634748217,formattedLastUpdatedAt:"10/20/2021",frontMatter:{title:"Tournament Tree",sidebar_label:"Tournament Tree"},sidebar:"cp",previous:{title:"Segment Tree",permalink:"/zen/cp/data-structures/segment-tree"},next:{title:"Treap",permalink:"/zen/cp/data-structures/treap"}},p=[],s={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"#pragma once\n#include \"../template/template.cpp\"\n\nconst int N = 2e5 + 5;\nint n, a[N];\nint t[4 * N];\n\nnamespace TournamentTree {\n  /**\n   * SOURCE:  https://www.geeksforgeeks.org/second-minimum-element-using-minimum-comparisons/\n   *          https://www.geeksforgeeks.org/tournament-tree-and-binary-heap/\n   * TEST:    Coursera - Algorithmic Toolbox\n  **/\n\n  void build(int v = 1, int l = 0, int r = n - 1) {\n      if (l == r) {\n          t[v] = a[l];\n          return;\n      }\n      int m = l + (r - l) / 2;\n      int vl = v << 1, vr = vl | 1;\n      build(vl, l, m);\n      build(vr, m + 1, r);\n      int vh = (t[vl] >= t[vr]) ? vl : vr;\n      t[v] = t[vh];\n  }\n}\n\nint main() {\n    cin >> n;\n    for (int i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n    TournamentTree::build();\n    ll an = ll(1) * t[2] * t[3];\n    cout << an << '\\n';\n}\n")))}m.isMDXComponent=!0}}]);