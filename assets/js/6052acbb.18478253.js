"use strict";(self.webpackChunkzen=self.webpackChunkzen||[]).push([[7432],{3905:function(t,n,e){e.d(n,{Zo:function(){return p},kt:function(){return d}});var r=e(7294);function a(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function o(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function i(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?o(Object(e),!0).forEach((function(n){a(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):o(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function c(t,n){if(null==t)return{};var e,r,a=function(t,n){if(null==t)return{};var e,r,a={},o=Object.keys(t);for(r=0;r<o.length;r++)e=o[r],n.indexOf(e)>=0||(a[e]=t[e]);return a}(t,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)e=o[r],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(a[e]=t[e])}return a}var s=r.createContext({}),m=function(t){var n=r.useContext(s),e=n;return t&&(e="function"==typeof t?t(n):i(i({},n),t)),e},p=function(t){var n=m(t.components);return r.createElement(s.Provider,{value:n},t.children)},u={inlineCode:"code",wrapper:function(t){var n=t.children;return r.createElement(r.Fragment,{},n)}},l=r.forwardRef((function(t,n){var e=t.components,a=t.mdxType,o=t.originalType,s=t.parentName,p=c(t,["components","mdxType","originalType","parentName"]),l=m(e),d=a,f=l["".concat(s,".").concat(d)]||l[d]||u[d]||o;return e?r.createElement(f,i(i({ref:n},p),{},{components:e})):r.createElement(f,i({ref:n},p))}));function d(t,n){var e=arguments,a=n&&n.mdxType;if("string"==typeof t||a){var o=e.length,i=new Array(o);i[0]=l;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=t,c.mdxType="string"==typeof t?t:a,i[1]=c;for(var m=2;m<o;m++)i[m]=e[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,e)}l.displayName="MDXCreateElement"},5400:function(t,n,e){e.r(n),e.d(n,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return m},toc:function(){return p},default:function(){return l}});var r=e(7462),a=e(3366),o=(e(7294),e(3905)),i=["components"],c={title:"Number Theoretic Transform (NTT)"},s=void 0,m={unversionedId:"cp/math/ntt",id:"cp/math/ntt",isDocsHomePage:!1,title:"Number Theoretic Transform (NTT)",description:"- ModularArithmetic::ModInt \u279d /cp/math/modint",source:"@site/docs/cp/math/ntt.mdx",sourceDirName:"cp/math",slug:"/cp/math/ntt",permalink:"/zen/cp/math/ntt",editUrl:"https://github.com/vamsi3/zen/edit/master/docs/cp/math/ntt.mdx",tags:[],version:"current",lastUpdatedAt:1638204530,formattedLastUpdatedAt:"11/29/2021",frontMatter:{title:"Number Theoretic Transform (NTT)"},sidebar:"cp",previous:{title:"Montgomery Space",permalink:"/zen/cp/math/montgomery"},next:{title:"Number Theory",permalink:"/zen/cp/math/number-theory"}},p=[],u={toc:p};function l(t){var n=t.components,e=(0,a.Z)(t,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,e,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"INCLUDE")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("ul",{parentName:"div"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ModularArithmetic::ModInt")," \u279d ",(0,o.kt)("a",{parentName:"li",href:"/cp/math/modint"},"/cp/math/modint"))))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"namespace Math {\n    template<typename Mint> class NTT {\n        static constexpr auto MOD  = Mint::MOD;\n        static constexpr auto ROOT = Mint::primitiveRoot();\n        \n    public:\n        /** @brief: Assumes a.size() is a power of two.\n         */\n        static void ntt(std::vector<Mint>& a, bool inverse) {\n            if (a.empty()) return;\n            auto n = static_cast<std::int32_t>(a.size());\n            assert((n ^ (n & -n)) == 0);\n\n            std::int32_t i = 0;\n            for (std::int32_t j = 1; j < n - 1; ++j) {\n                for (std::int32_t k = n >> 1; k > (i ^= k); k >>= 1);\n                if (j < i) swap(a[i], a[j]);\n            }\n        \n            auto h = ROOT.pow((MOD - 1) / n);\n            if (inverse) h = h.inv();\n\n            for (std::int32_t m = 1; m < n; m <<= 1) {\n                const auto m2 = m << 1;\n                const auto base = h.pow(n / m2);\n                Mint w = 1;\n                for (std::int32_t x = 0; x < m; ++x) {\n                    for (std::int32_t s = x; s < n; s += m2) {\n                        auto u = a[s], d = a[s + m] * w;\n                        a[s] = u + d; a[s + m] = u - d;\n                    }\n                    w *= base;\n                }\n            }\n\n            if (inverse) {\n                const auto n_inv = Mint(n).inv();\n                for (auto &x : a) x *= n_inv;\n            }\n        }\n\n        static void conv1D(std::vector<Mint>& a, std::vector<Mint> b) {\n            const auto conv_size = static_cast<std::int32_t>(a.size() + b.size() - 1);\n            auto n = conv_size;\n            while (n ^ (n & -n)) n ^= n & -n;\n            if (n < conv_size) n <<= 1;\n            a.resize(n); ntt(a, false);\n            b.resize(n); ntt(b, false);\n            for (std::int32_t i = 0; i < n; ++i) a[i] *= b[i];\n            ntt(a, true); a.resize(conv_size);\n        }\n    };\n}\n\nint main() {\n    vector<Mint> a = {1, 4, 2, 3, 4};\n    vector<Mint> b = {3, 2, 0, 2, 1, 2};\n    Math::NTT<Mint>::conv1D(a, b);\n    for (auto &x : a) cout << x << ' ';\n    cout << '\\n';\n}\n")))}l.isMDXComponent=!0}}]);