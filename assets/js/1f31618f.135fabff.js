"use strict";(self.webpackChunkzen=self.webpackChunkzen||[]).push([[4854],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),s=l(n),m=i,f=s["".concat(p,".").concat(m)]||s[m]||d[m]||a;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=s;var u={};for(var p in t)hasOwnProperty.call(t,p)&&(u[p]=t[p]);u.originalType=e,u.mdxType="string"==typeof e?e:i,o[1]=u;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},9481:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return u},metadata:function(){return l},toc:function(){return d}});var r=n(3117),i=n(102),a=(n(7294),n(3905)),o=["components"],u={title:"Pairing Heap"},p=void 0,l={unversionedId:"cp/data-structures/heap/pairing-heap",id:"cp/data-structures/heap/pairing-heap",title:"Pairing Heap",description:"- https://brilliant.org/wiki/pairing-heap/",source:"@site/docs/cp/data-structures/heap/pairing-heap.mdx",sourceDirName:"cp/data-structures/heap",slug:"/cp/data-structures/heap/pairing-heap",permalink:"/zen/cp/data-structures/heap/pairing-heap",editUrl:"https://github.com/vamsi3/zen/edit/master/docs/cp/data-structures/heap/pairing-heap.mdx",tags:[],version:"current",lastUpdatedAt:1648309952,formattedLastUpdatedAt:"3/26/2022",frontMatter:{title:"Pairing Heap"},sidebar:"cp",previous:{title:"MinMax Heap",permalink:"/zen/cp/data-structures/heap/minmax-heap"},next:{title:"Singly Linked List",permalink:"/zen/cp/data-structures/linked-list"}},c={},d=[],s={toc:d};function m(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Resources")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("ul",{parentName:"div"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://brilliant.org/wiki/pairing-heap/"},"https://brilliant.org/wiki/pairing-heap/")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Pairing_heap"},"https://en.wikipedia.org/wiki/Pairing_heap")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://users.cs.fiu.edu/~weiss/dsaa_c++/code/PairingHeap.cpp"},"https://users.cs.fiu.edu/~weiss/dsaa_c++/code/PairingHeap.cpp")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Double-ended_priority_queue"},"https://en.wikipedia.org/wiki/Double-ended_priority_queue"))))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\n\ntemplate<typename T>\nclass DoubleEndedPriorityQueue {\npublic:\n    DoubleEndedPriorityQueue() = default;\n    DoubleEndedPriorityQueue(DoubleEndedPriorityQueue const&) = default;\n    DoubleEndedPriorityQueue(DoubleEndedPriorityQueue&&) noexcept = default;\n    DoubleEndedPriorityQueue& operator=(DoubleEndedPriorityQueue const&) & = default;\n    DoubleEndedPriorityQueue& operator=(DoubleEndedPriorityQueue&&) & noexcept = default;\n    virtual ~DoubleEndedPriorityQueue() = default;\n\n    virtual bool isEmpty() const = 0;\n    virtual size_t size() const = 0;\n    virtual T getMin() const = 0;\n    virtual T getMax() const = 0;\n    virtual void put(T const&) = 0;\n    virtual void removeMin() = 0;\n    virtual void removeMax() = 0;\n};\n\ntemplate<typename T>\nclass PairingHeap : public DoubleEndedPriorityQueue<T> {\nprivate:\n    class Node {\n    public:\n        Node* nextSibling = nullptr;\n        Node* leftmostChild = nullptr;\n        T value;\n\n        explicit Node(T value) : value(value) {}\n        ~Node() { delete nextSibling; delete leftmostChild; }\n    };\n\n    Node* root = nullptr;\n\n    void compareAndLink(Node* otherNode) {\n        if (root == nullptr || otherNode == nullptr) return;\n        if (otherNode->value < root->value) std::swap(root, otherNode);\n        // ...\n    }\n\npublic:\n\n\n    [[nodiscard]] bool isEmpty() const override { return root == nullptr; }\n    [[nodiscard]] size_t size() const override { return 1; }\n\n    [[nodiscard]] T getMin() const override {\n        if (root == nullptr) return 0;\n        return root->value;\n    }\n\n    friend void merge(PairingHeap heap1, PairingHeap heap2) {\n        heap1.compareAndLink(heap2.root);\n    }\n\n    void put(T const& value) override {\n        Node* newNode = new Node(value);\n        if (root == nullptr) {\n            root = newNode;\n        } else {\n            this->compareAndLink(newNode);\n        }\n    }\n};\n")))}m.isMDXComponent=!0}}]);